
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftGTGTELTLTEleftPLUSMINUSleftTIMESDIVMODADDR AND ASSERT BREAK CHAR CHAR_CONST COMMA DIV DIVEQ ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GT GTE ID IF INT INT_CONST LBRACE LBRACKET LPAREN LT LTE MINUS MINUSEQ MINUSMINUS MOD MODEQ NEQ NOT OR PLUS PLUSEQ PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES TIMESEQ VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration : function_definition  global_declaration : declaration  function_definition : declarator declaration_list_emp compound_statement\n         function_definition : type_specifier declarator declaration_list_emp compound_statement\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         declaration_list : declaration\n                             | declaration_list declaration\n         declaration_list_emp : declaration_list\n                                 | empty\n         decl_body : type_specifier init_declarator_list_emp  declaration : decl_body SEMI\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         init_declarator_list_emp : init_declarator_list\n                                     | empty\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         declarator : direct_declarator  declarator : pointer direct_declarator  pointer : TIMES\n                    | TIMES pointer\n         direct_declarator : identifier  direct_declarator : LPAREN declarator RPAREN  direct_declarator : direct_declarator LBRACKET constant_expression_emp RBRACKET  direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list_emp RPAREN\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration : type_specifier declarator\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         identifier_list_emp : identifier_list\n                                | empty\n         constant_expression : binary_expression\n         constant_expression_emp : empty\n                                    | constant_expression\n         binary_expression : cast_expression\n                              | binary_expression TIMES binary_expression\n                              | binary_expression DIV binary_expression\n                              | binary_expression MOD binary_expression\n                              | binary_expression PLUS binary_expression\n                              | binary_expression MINUS binary_expression\n                              | binary_expression LT binary_expression\n                              | binary_expression LTE binary_expression\n                              | binary_expression GT binary_expression\n                              | binary_expression GTE binary_expression\n                              | binary_expression EQ binary_expression\n                              | binary_expression NEQ binary_expression\n                              | binary_expression AND binary_expression\n                              | binary_expression OR binary_expression\n         cast_expression : unary_expression  cast_expression : LPAREN type_specifier RPAREN cast_expression  unary_expression : postfix_expression  unary_expression : PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n         postfix_expression : primary_expression  postfix_expression : postfix_expression LBRACKET expression RBRACKET  postfix_expression : postfix_expression LPAREN argument_expression RPAREN\n                               | postfix_expression LPAREN RPAREN \n         postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         primary_expression : identifier\n                               | constant\n                               | string\n                               | LPAREN expression RPAREN\n         identifier : ID  constant : INT_CONST  constant : CHAR_CONST  constant : FLOAT_CONST  string : STRING  expression : assignment_expression\n                       | expression COMMA assignment_expression\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | TIMESEQ\n                                | DIVEQ\n                                | MODEQ\n                                | PLUSEQ\n                                | MINUSEQ\n         unary_operator : ADDR\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         initializer : assignment_expression  initializer : LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         block_item : declaration\n                       | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         block_item_list_emp : empty\n                                | block_item_list\n         compound_statement : LBRACE block_item_list_emp RBRACE\n         statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n         expression_statement : expression SEMI  selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement  iteration_statement : FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement  iteration_statement : FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement  expression_emp : empty\n                           | expression\n         jump_statement : BREAK SEMI  jump_statement : RETURN expression_emp SEMI  assert_statement : ASSERT expression SEMI  print_statement : PRINT LPAREN  expression_emp RPAREN SEMI  read_statement : READ LPAREN argument_expression RPAREN SEMI empty :'
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,9,15,18,19,21,23,25,30,32,33,36,37,38,52,74,77,78,79,80,81,82,83,84,85,86,87,88,101,106,130,131,132,135,136,137,141,142,184,185,204,205,208,209,213,217,218,],[11,11,-2,-4,-5,11,-24,-28,-73,-3,11,-12,11,-17,11,-25,-6,11,-13,11,-29,11,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-7,-30,-31,11,-32,-106,-103,-115,11,-123,-124,-125,-116,-118,-126,-127,-117,-120,-119,]),'CHAR':([0,2,3,4,5,6,9,15,18,19,21,23,25,30,32,33,36,37,38,52,74,77,78,79,80,81,82,83,84,85,86,87,88,101,106,130,131,132,135,136,137,141,142,184,185,204,205,208,209,213,217,218,],[12,12,-2,-4,-5,12,-24,-28,-73,-3,12,-12,12,-17,12,-25,-6,12,-13,12,-29,12,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-7,-30,-31,12,-32,-106,-103,-115,12,-123,-124,-125,-116,-118,-126,-127,-117,-120,-119,]),'INT':([0,2,3,4,5,6,9,15,18,19,21,23,25,30,32,33,36,37,38,52,74,77,78,79,80,81,82,83,84,85,86,87,88,101,106,130,131,132,135,136,137,141,142,184,185,204,205,208,209,213,217,218,],[13,13,-2,-4,-5,13,-24,-28,-73,-3,13,-12,13,-17,13,-25,-6,13,-13,13,-29,13,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-7,-30,-31,13,-32,-106,-103,-115,13,-123,-124,-125,-116,-118,-126,-127,-117,-120,-119,]),'FLOAT':([0,2,3,4,5,6,9,15,18,19,21,23,25,30,32,33,36,37,38,52,74,77,78,79,80,81,82,83,84,85,86,87,88,101,106,130,131,132,135,136,137,141,142,184,185,204,205,208,209,213,217,218,],[14,14,-2,-4,-5,14,-24,-28,-73,-3,14,-12,14,-17,14,-25,-6,14,-13,14,-29,14,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-7,-30,-31,14,-32,-106,-103,-115,14,-123,-124,-125,-116,-118,-126,-127,-117,-120,-119,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,24,30,31,33,35,36,37,41,42,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,74,77,78,79,80,81,82,83,84,85,86,87,88,90,91,92,94,95,96,97,101,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,130,132,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,172,175,183,184,185,190,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[16,16,-2,-4,-5,16,32,16,-8,-9,-10,-11,-28,16,-26,-73,-3,16,-17,52,32,-27,-6,52,52,16,-91,-92,-93,52,123,127,127,52,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,16,-29,52,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,139,140,141,52,52,147,148,-7,52,-30,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-67,-68,52,-31,-32,-106,-103,-115,52,52,52,52,-123,52,52,52,-84,-85,-86,-87,-88,-89,52,-72,-66,52,-124,-125,52,-64,-65,52,52,52,52,-116,-118,52,-126,-127,52,52,-117,52,52,-120,-119,]),'TIMES':([0,2,3,4,5,7,11,12,13,14,16,17,18,19,24,30,31,36,37,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,72,77,78,79,80,81,82,83,84,85,86,87,88,94,95,99,100,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,175,183,184,185,190,191,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[17,17,-2,-4,-5,17,-8,-9,-10,-11,17,17,-73,-3,17,-17,48,-6,48,48,17,107,-43,-91,-92,-93,-57,48,-59,48,48,48,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,17,48,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,48,48,107,-57,-7,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-67,-68,-60,48,-61,-62,-106,-103,-115,48,48,48,48,-123,48,48,48,-84,-85,-86,-87,-88,-89,-44,-45,-46,107,107,107,107,107,107,107,107,107,107,48,-72,-66,48,-124,-125,48,-58,-64,-65,48,48,48,48,-116,-118,48,-126,-127,48,48,-117,48,48,-120,-119,]),'ID':([0,2,3,4,5,7,10,11,12,13,14,16,17,19,24,30,31,32,35,36,37,41,42,48,49,50,52,54,55,56,58,59,72,77,78,79,80,81,82,83,84,85,86,87,88,94,95,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,133,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[18,18,-2,-4,-5,18,18,-8,-9,-10,-11,18,-26,-3,18,-17,18,18,-27,-6,18,18,18,-91,-92,-93,18,18,18,18,-90,-94,18,18,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,18,18,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-106,-103,-115,18,18,18,18,-123,18,18,18,-84,-85,-86,-87,-88,-89,18,18,-124,-125,18,18,18,18,18,-116,-118,18,-126,-127,18,18,-117,18,18,-120,-119,]),'$end':([1,2,3,4,5,19,30,36,101,135,],[0,-1,-2,-4,-5,-3,-17,-6,-7,-106,]),'LBRACE':([6,9,15,18,20,21,22,23,25,30,33,37,38,40,41,74,77,78,79,80,81,82,83,84,85,86,87,88,104,106,130,132,135,136,137,142,184,185,190,195,196,204,205,208,209,210,213,215,216,217,218,],[-128,-24,-28,-73,37,-14,-15,-12,-128,-17,-25,37,-13,37,104,-29,37,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,104,-30,-31,-32,-106,-103,-115,-123,-124,-125,104,37,37,-116,-118,-126,-127,37,-117,37,37,-120,-119,]),'SEMI':([7,8,9,11,12,13,14,15,18,24,25,26,27,28,29,30,33,39,47,51,53,57,60,61,62,63,64,65,66,74,89,93,94,98,99,100,102,103,105,106,124,125,126,128,129,130,132,141,143,144,145,146,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,179,182,183,188,189,191,192,193,197,198,199,200,201,206,],[-128,30,-24,-8,-9,-10,-11,-28,-73,-128,-22,-16,-20,-21,-18,-17,-25,-22,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,-29,137,142,-128,-78,-82,-57,-23,-95,-19,-30,-67,-68,-60,-61,-62,-31,-32,-128,184,-121,-122,185,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-66,-79,197,-128,-83,-96,-58,-64,-65,-128,207,208,209,-97,211,]),'EQUALS':([9,15,18,25,33,39,51,53,57,60,61,62,63,64,65,66,74,100,106,124,125,126,128,129,130,132,172,175,191,192,193,],[-24,-28,-73,41,-25,41,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,-29,150,-30,-67,-68,-60,-61,-62,-31,-32,-72,-66,-58,-64,-65,]),'COMMA':([9,15,18,25,27,29,33,39,47,51,53,57,60,61,62,63,64,65,66,67,69,70,73,74,89,98,99,100,102,103,105,106,121,124,125,126,128,129,130,132,134,145,146,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,174,175,176,177,178,179,180,181,187,188,189,191,192,193,201,202,203,],[-24,-28,-73,-22,42,-18,-25,-22,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,131,-33,133,-36,-29,138,-78,-82,-57,-23,-95,-19,-30,138,-67,-68,-60,-61,-62,-31,-32,-35,138,138,190,-98,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,138,194,-66,-80,-34,-37,-79,138,138,194,-83,-96,-58,-64,-65,-97,-99,-81,]),'RPAREN':([9,11,12,13,14,15,18,32,33,34,47,51,53,57,60,61,62,63,64,65,66,67,68,69,70,71,73,74,98,99,100,106,120,121,123,124,125,126,128,129,130,132,134,144,145,147,158,159,160,161,162,163,164,165,166,167,168,169,170,172,174,175,176,177,178,179,180,181,186,187,188,191,192,193,203,207,211,212,214,],[-24,-8,-9,-10,-11,-28,-73,-128,-25,74,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,130,132,-33,-38,-39,-36,-29,-78,-82,-57,-30,171,172,175,-67,-68,-60,-61,-62,-31,-32,-35,-121,-122,-128,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,193,-66,-80,-34,-37,-79,195,196,199,200,-83,-58,-64,-65,-81,-128,-128,215,216,]),'LBRACKET':([9,15,18,33,53,57,60,61,62,63,64,65,66,74,106,124,125,130,132,172,175,192,193,],[31,-28,-73,31,122,-63,-69,-70,-71,-74,-75,-76,-77,-29,-30,-67,-68,-31,-32,-72,-66,-64,-65,]),'PLUSPLUS':([18,30,31,37,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,172,175,183,184,185,190,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-73,-17,54,54,54,-91,-92,-93,54,124,54,54,54,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,54,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-67,-68,54,-106,-103,-115,54,54,54,54,-123,54,54,54,-84,-85,-86,-87,-88,-89,54,-72,-66,54,-124,-125,54,-64,-65,54,54,54,54,-116,-118,54,-126,-127,54,54,-117,54,54,-120,-119,]),'MINUSMINUS':([18,30,31,37,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,172,175,183,184,185,190,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-73,-17,55,55,55,-91,-92,-93,55,125,55,55,55,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,55,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-67,-68,55,-106,-103,-115,55,55,55,55,-123,55,55,55,-84,-85,-86,-87,-88,-89,55,-72,-66,55,-124,-125,55,-64,-65,55,55,55,55,-116,-118,55,-126,-127,55,55,-117,55,55,-120,-119,]),'DIV':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,108,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,108,-57,-67,-68,-60,-61,-62,-44,-45,-46,108,108,108,108,108,108,108,108,108,108,-72,-66,-58,-64,-65,]),'MOD':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,109,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,109,-57,-67,-68,-60,-61,-62,-44,-45,-46,109,109,109,109,109,109,109,109,109,109,-72,-66,-58,-64,-65,]),'PLUS':([18,30,31,37,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,94,95,99,100,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,175,183,184,185,190,191,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-73,-17,49,49,49,110,-43,-91,-92,-93,-57,49,-59,49,49,49,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,49,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,49,49,110,-57,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-67,-68,-60,49,-61,-62,-106,-103,-115,49,49,49,49,-123,49,49,49,-84,-85,-86,-87,-88,-89,-44,-45,-46,-47,-48,110,110,110,110,110,110,110,110,49,-72,-66,49,-124,-125,49,-58,-64,-65,49,49,49,49,-116,-118,49,-126,-127,49,49,-117,49,49,-120,-119,]),'MINUS':([18,30,31,37,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,77,78,79,80,81,82,83,84,85,86,87,88,94,95,99,100,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,175,183,184,185,190,191,192,193,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-73,-17,50,50,50,111,-43,-91,-92,-93,-57,50,-59,50,50,50,-63,-90,-94,-69,-70,-71,-74,-75,-76,-77,50,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,50,50,111,-57,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-67,-68,-60,50,-61,-62,-106,-103,-115,50,50,50,50,-123,50,50,50,-84,-85,-86,-87,-88,-89,-44,-45,-46,-47,-48,111,111,111,111,111,111,111,111,50,-72,-66,50,-124,-125,50,-58,-64,-65,50,50,50,50,-116,-118,50,-126,-127,50,50,-117,50,50,-120,-119,]),'LT':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,112,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,112,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,112,112,112,112,-72,-66,-58,-64,-65,]),'LTE':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,113,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,113,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,113,113,113,113,-72,-66,-58,-64,-65,]),'GT':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,114,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,114,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,114,114,114,114,-72,-66,-58,-64,-65,]),'GTE':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,115,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,115,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,115,115,115,115,-72,-66,-58,-64,-65,]),'EQ':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,116,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,116,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,116,116,-72,-66,-58,-64,-65,]),'NEQ':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,117,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,117,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,117,117,-72,-66,-58,-64,-65,]),'AND':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,118,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,118,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,118,-72,-66,-58,-64,-65,]),'OR':([18,46,47,51,53,57,60,61,62,63,64,65,66,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,191,192,193,],[-73,119,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,119,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-66,-58,-64,-65,]),'RBRACKET':([18,31,43,44,45,46,47,51,53,57,60,61,62,63,64,65,66,98,99,100,124,125,126,128,129,158,159,160,161,162,163,164,165,166,167,168,169,170,172,173,175,179,188,191,192,193,],[-73,-128,106,-41,-42,-40,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,-78,-82,-57,-67,-68,-60,-61,-62,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,192,-66,-79,-83,-58,-64,-65,]),'TIMESEQ':([18,51,53,57,60,61,62,63,64,65,66,100,124,125,126,128,129,172,175,191,192,193,],[-73,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,151,-67,-68,-60,-61,-62,-72,-66,-58,-64,-65,]),'DIVEQ':([18,51,53,57,60,61,62,63,64,65,66,100,124,125,126,128,129,172,175,191,192,193,],[-73,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,152,-67,-68,-60,-61,-62,-72,-66,-58,-64,-65,]),'MODEQ':([18,51,53,57,60,61,62,63,64,65,66,100,124,125,126,128,129,172,175,191,192,193,],[-73,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,153,-67,-68,-60,-61,-62,-72,-66,-58,-64,-65,]),'PLUSEQ':([18,51,53,57,60,61,62,63,64,65,66,100,124,125,126,128,129,172,175,191,192,193,],[-73,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,154,-67,-68,-60,-61,-62,-72,-66,-58,-64,-65,]),'MINUSEQ':([18,51,53,57,60,61,62,63,64,65,66,100,124,125,126,128,129,172,175,191,192,193,],[-73,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,155,-67,-68,-60,-61,-62,-72,-66,-58,-64,-65,]),'RBRACE':([18,30,37,47,51,53,57,60,61,62,63,64,65,66,75,76,77,78,79,80,81,82,83,84,85,86,87,88,99,100,103,124,125,126,128,129,135,136,137,142,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,184,185,188,189,190,191,192,193,201,202,204,205,208,209,213,217,218,],[-73,-17,-128,-43,-57,-59,-63,-69,-70,-71,-74,-75,-76,-77,135,-104,-105,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-82,-57,-95,-67,-68,-60,-61,-62,-106,-103,-115,-123,189,-98,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-72,-66,-124,-125,-83,-96,201,-58,-64,-65,-97,-99,-116,-118,-126,-127,-117,-120,-119,]),'IF':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,90,90,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,90,90,-116,-118,-126,-127,90,-117,90,90,-120,-119,]),'WHILE':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,91,91,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,91,91,-116,-118,-126,-127,91,-117,91,91,-120,-119,]),'FOR':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,92,92,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,92,92,-116,-118,-126,-127,92,-117,92,92,-120,-119,]),'BREAK':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,93,93,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,93,93,-116,-118,-126,-127,93,-117,93,93,-120,-119,]),'RETURN':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,94,94,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,94,94,-116,-118,-126,-127,94,-117,94,94,-120,-119,]),'ASSERT':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,95,95,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,95,95,-116,-118,-126,-127,95,-117,95,95,-120,-119,]),'PRINT':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,96,96,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,96,96,-116,-118,-126,-127,96,-117,96,96,-120,-119,]),'READ':([30,37,77,78,79,80,81,82,83,84,85,86,87,88,135,136,137,142,184,185,195,196,204,205,208,209,210,213,215,216,217,218,],[-17,97,97,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,-106,-103,-115,-123,-124,-125,97,97,-116,-118,-126,-127,97,-117,97,97,-120,-119,]),'ADDR':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,58,58,58,-91,-92,-93,58,58,58,58,-90,-94,58,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-106,-103,-115,58,58,58,58,-123,58,58,58,-84,-85,-86,-87,-88,-89,58,58,-124,-125,58,58,58,58,58,-116,-118,58,-126,-127,58,58,-117,58,58,-120,-119,]),'NOT':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,59,59,59,-91,-92,-93,59,59,59,59,-90,-94,59,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-106,-103,-115,59,59,59,59,-123,59,59,59,-84,-85,-86,-87,-88,-89,59,59,-124,-125,59,59,59,59,59,-116,-118,59,-126,-127,59,59,-117,59,59,-120,-119,]),'INT_CONST':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,63,63,63,-91,-92,-93,63,63,63,63,-90,-94,63,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-106,-103,-115,63,63,63,63,-123,63,63,63,-84,-85,-86,-87,-88,-89,63,63,-124,-125,63,63,63,63,63,-116,-118,63,-126,-127,63,63,-117,63,63,-120,-119,]),'CHAR_CONST':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,64,64,64,-91,-92,-93,64,64,64,64,-90,-94,64,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-106,-103,-115,64,64,64,64,-123,64,64,64,-84,-85,-86,-87,-88,-89,64,64,-124,-125,64,64,64,64,64,-116,-118,64,-126,-127,64,64,-117,64,64,-120,-119,]),'FLOAT_CONST':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,65,65,65,-91,-92,-93,65,65,65,65,-90,-94,65,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-106,-103,-115,65,65,65,65,-123,65,65,65,-84,-85,-86,-87,-88,-89,65,65,-124,-125,65,65,65,65,65,-116,-118,65,-126,-127,65,65,-117,65,65,-120,-119,]),'STRING':([30,31,37,41,48,49,50,52,54,55,56,58,59,77,78,79,80,81,82,83,84,85,86,87,88,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,137,138,139,140,141,142,147,148,149,150,151,152,153,154,155,171,183,184,185,190,194,195,196,197,204,205,207,208,209,210,211,213,215,216,217,218,],[-17,66,66,66,-91,-92,-93,66,66,66,66,-90,-94,66,-102,-100,-101,-107,-108,-109,-110,-111,-112,-113,-114,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-106,-103,-115,66,66,66,66,-123,66,66,66,-84,-85,-86,-87,-88,-89,66,66,-124,-125,66,66,66,66,66,-116,-118,66,-126,-127,66,66,-117,66,66,-120,-119,]),'ELSE':([81,82,83,84,85,86,87,88,135,137,142,184,185,204,205,208,209,213,217,218,],[-107,-108,-109,-110,-111,-112,-113,-114,-106,-115,-123,-124,-125,210,-118,-126,-127,-117,-120,-119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,6,21,25,37,77,141,],[5,5,23,38,23,79,79,183,]),'declarator':([0,2,7,16,24,42,72,],[6,6,25,34,39,39,134,]),'type_specifier':([0,2,6,21,25,32,37,52,77,131,141,],[7,7,24,24,24,72,24,120,24,72,24,]),'decl_body':([0,2,6,21,25,37,77,141,],[8,8,8,8,8,8,8,8,]),'direct_declarator':([0,2,7,10,16,24,42,72,],[9,9,9,33,9,9,9,9,]),'pointer':([0,2,7,16,17,24,42,72,],[10,10,10,10,35,10,10,10,]),'identifier':([0,2,7,10,16,24,31,32,37,41,42,52,54,55,56,72,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,133,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[15,15,15,15,15,15,60,73,60,60,15,60,60,60,60,15,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,178,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'declaration_list_emp':([6,25,],[20,40,]),'declaration_list':([6,25,],[21,21,]),'empty':([6,7,24,25,31,32,37,94,141,147,183,197,207,211,],[22,28,28,22,44,71,76,144,144,144,144,144,144,144,]),'init_declarator_list_emp':([7,24,],[26,26,]),'init_declarator_list':([7,24,],[27,27,]),'init_declarator':([7,24,42,],[29,29,105,]),'compound_statement':([20,37,40,77,195,196,210,215,216,],[36,82,101,82,82,82,82,82,82,]),'constant_expression_emp':([31,],[43,]),'constant_expression':([31,],[45,]),'binary_expression':([31,37,41,52,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,183,190,194,195,196,197,207,210,211,215,216,],[46,99,99,99,99,99,99,99,158,159,160,161,162,163,164,165,166,167,168,169,170,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'cast_expression':([31,37,41,52,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[47,47,47,47,129,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,191,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[51,100,100,100,126,128,51,100,100,100,100,51,51,51,51,51,51,51,51,51,51,51,51,51,100,100,100,100,100,100,100,100,100,100,51,100,100,100,100,100,100,100,100,100,100,100,]),'postfix_expression':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'string':([31,37,41,52,54,55,56,77,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,138,139,140,141,147,148,149,171,183,190,194,195,196,197,207,210,211,215,216,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'parameter_list':([32,],[67,]),'identifier_list_emp':([32,],[68,]),'parameter_declaration':([32,131,],[69,177,]),'identifier_list':([32,],[70,]),'block_item_list_emp':([37,],[75,]),'block_item_list':([37,],[77,]),'block_item':([37,77,],[78,136,]),'statement':([37,77,195,196,210,215,216,],[80,80,204,205,213,217,218,]),'expression_statement':([37,77,195,196,210,215,216,],[81,81,81,81,81,81,81,]),'selection_statement':([37,77,195,196,210,215,216,],[83,83,83,83,83,83,83,]),'iteration_statement':([37,77,195,196,210,215,216,],[84,84,84,84,84,84,84,]),'jump_statement':([37,77,195,196,210,215,216,],[85,85,85,85,85,85,85,]),'assert_statement':([37,77,195,196,210,215,216,],[86,86,86,86,86,86,86,]),'print_statement':([37,77,195,196,210,215,216,],[87,87,87,87,87,87,87,]),'read_statement':([37,77,195,196,210,215,216,],[88,88,88,88,88,88,88,]),'expression':([37,52,77,94,95,122,127,139,140,141,147,183,195,196,197,207,210,211,215,216,],[89,121,89,145,146,173,121,180,181,145,145,145,89,89,145,145,89,145,89,89,]),'assignment_expression':([37,41,52,77,94,95,104,122,123,127,138,139,140,141,147,148,149,183,190,194,195,196,197,207,210,211,215,216,],[98,103,98,98,98,98,103,98,176,98,179,98,98,98,98,176,188,98,103,203,98,98,98,98,98,98,98,98,]),'initializer':([41,104,190,],[102,157,202,]),'expression_emp':([94,141,147,183,197,207,211,],[143,182,186,198,206,212,214,]),'assignment_operator':([100,],[149,]),'initializer_list':([104,],[156,]),'argument_expression':([123,148,],[174,187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',151),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',157),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',158),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','uc_parser.py',164),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_1','uc_parser.py',169),
  ('function_definition -> declarator declaration_list_emp compound_statement','function_definition',3,'p_function_definition_1','uc_parser.py',174),
  ('function_definition -> type_specifier declarator declaration_list_emp compound_statement','function_definition',4,'p_function_definition_2','uc_parser.py',187),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',196),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',197),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',198),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',199),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',205),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',206),
  ('declaration_list_emp -> declaration_list','declaration_list_emp',1,'p_declaration_list_emp','uc_parser.py',215),
  ('declaration_list_emp -> empty','declaration_list_emp',1,'p_declaration_list_emp','uc_parser.py',216),
  ('decl_body -> type_specifier init_declarator_list_emp','decl_body',2,'p_decl_body','uc_parser.py',222),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','uc_parser.py',232),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',238),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',239),
  ('init_declarator_list_emp -> init_declarator_list','init_declarator_list_emp',1,'p_init_declarator_list_emp','uc_parser.py',248),
  ('init_declarator_list_emp -> empty','init_declarator_list_emp',1,'p_init_declarator_list_emp','uc_parser.py',249),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',255),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',256),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','uc_parser.py',265),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator1','uc_parser.py',269),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',274),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',275),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',291),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',298),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',303),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',311),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',312),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',321),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',322),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',332),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',339),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',340),
  ('identifier_list_emp -> identifier_list','identifier_list_emp',1,'p_identifier_list_emp','uc_parser.py',350),
  ('identifier_list_emp -> empty','identifier_list_emp',1,'p_identifier_list_emp','uc_parser.py',351),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',357),
  ('constant_expression_emp -> empty','constant_expression_emp',1,'p_constant_expression_emp','uc_parser.py',363),
  ('constant_expression_emp -> constant_expression','constant_expression_emp',1,'p_constant_expression_emp','uc_parser.py',364),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',370),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',371),
  ('binary_expression -> binary_expression DIV binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',372),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',373),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',374),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',375),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',376),
  ('binary_expression -> binary_expression LTE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',377),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',378),
  ('binary_expression -> binary_expression GTE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',379),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',380),
  ('binary_expression -> binary_expression NEQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',381),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',382),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',383),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',392),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',397),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',402),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',407),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',408),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',409),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',415),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','uc_parser.py',420),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',425),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','uc_parser.py',426),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',432),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',433),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',439),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',440),
  ('primary_expression -> string','primary_expression',1,'p_primary_expression','uc_parser.py',441),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser.py',442),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',451),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',456),
  ('constant -> CHAR_CONST','constant',1,'p_constant_2','uc_parser.py',461),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_3','uc_parser.py',466),
  ('string -> STRING','string',1,'p_string','uc_parser.py',471),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',476),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',477),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',488),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',489),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',502),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',503),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',512),
  ('assignment_operator -> TIMESEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',513),
  ('assignment_operator -> DIVEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',514),
  ('assignment_operator -> MODEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',515),
  ('assignment_operator -> PLUSEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',516),
  ('assignment_operator -> MINUSEQ','assignment_operator',1,'p_assignment_operator','uc_parser.py',517),
  ('unary_operator -> ADDR','unary_operator',1,'p_unary_operator','uc_parser.py',523),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',524),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',525),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',526),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',527),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','uc_parser.py',533),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','uc_parser.py',538),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','uc_parser.py',539),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',548),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',549),
  ('block_item -> declaration','block_item',1,'p_block_item','uc_parser.py',559),
  ('block_item -> statement','block_item',1,'p_block_item','uc_parser.py',560),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','uc_parser.py',566),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','uc_parser.py',567),
  ('block_item_list_emp -> empty','block_item_list_emp',1,'p_block_item_list_emp','uc_parser.py',576),
  ('block_item_list_emp -> block_item_list','block_item_list_emp',1,'p_block_item_list_emp','uc_parser.py',577),
  ('compound_statement -> LBRACE block_item_list_emp RBRACE','compound_statement',3,'p_compound_statement','uc_parser.py',583),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',590),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',591),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',592),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',593),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',594),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',595),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',596),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',597),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',603),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',611),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',612),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','uc_parser.py',621),
  ('iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement','iteration_statement',9,'p_iteration_statement_2','uc_parser.py',626),
  ('iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement','iteration_statement',8,'p_iteration_statement_3','uc_parser.py',631),
  ('expression_emp -> empty','expression_emp',1,'p_expression_emp','uc_parser.py',636),
  ('expression_emp -> expression','expression_emp',1,'p_expression_emp','uc_parser.py',637),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','uc_parser.py',643),
  ('jump_statement -> RETURN expression_emp SEMI','jump_statement',3,'p_jump_statement_2','uc_parser.py',648),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',656),
  ('print_statement -> PRINT LPAREN expression_emp RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',661),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',666),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',671),
]
