Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> function_definition
Rule 5     global_declaration -> declaration
Rule 6     function_definition -> declarator declaration_list_emp compound_statement
Rule 7     function_definition -> type_specifier declarator declaration_list_emp compound_statement
Rule 8     type_specifier -> VOID
Rule 9     type_specifier -> CHAR
Rule 10    type_specifier -> INT
Rule 11    type_specifier -> FLOAT
Rule 12    declaration_list -> declaration
Rule 13    declaration_list -> declaration_list declaration
Rule 14    declaration_list_emp -> declaration_list
Rule 15    declaration_list_emp -> empty
Rule 16    decl_body -> type_specifier init_declarator_list_emp
Rule 17    declaration -> decl_body SEMI
Rule 18    init_declarator_list -> init_declarator
Rule 19    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 20    init_declarator_list_emp -> init_declarator_list
Rule 21    init_declarator_list_emp -> empty
Rule 22    init_declarator -> declarator
Rule 23    init_declarator -> declarator EQUALS initializer
Rule 24    declarator -> direct_declarator
Rule 25    declarator -> pointer direct_declarator
Rule 26    pointer -> TIMES
Rule 27    pointer -> TIMES pointer
Rule 28    direct_declarator -> identifier
Rule 29    direct_declarator -> LPAREN declarator RPAREN
Rule 30    direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET
Rule 31    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 32    direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN
Rule 33    parameter_list -> parameter_declaration
Rule 34    parameter_list -> parameter_list COMMA parameter_declaration
Rule 35    parameter_declaration -> type_specifier declarator
Rule 36    identifier_list -> identifier
Rule 37    identifier_list -> identifier_list COMMA identifier
Rule 38    identifier_list_emp -> identifier_list
Rule 39    identifier_list_emp -> empty
Rule 40    constant_expression -> binary_expression
Rule 41    constant_expression_emp -> empty
Rule 42    constant_expression_emp -> constant_expression
Rule 43    binary_expression -> cast_expression
Rule 44    binary_expression -> binary_expression TIMES binary_expression
Rule 45    binary_expression -> binary_expression DIV binary_expression
Rule 46    binary_expression -> binary_expression MOD binary_expression
Rule 47    binary_expression -> binary_expression PLUS binary_expression
Rule 48    binary_expression -> binary_expression MINUS binary_expression
Rule 49    binary_expression -> binary_expression LT binary_expression
Rule 50    binary_expression -> binary_expression LTE binary_expression
Rule 51    binary_expression -> binary_expression GT binary_expression
Rule 52    binary_expression -> binary_expression GTE binary_expression
Rule 53    binary_expression -> binary_expression EQ binary_expression
Rule 54    binary_expression -> binary_expression NEQ binary_expression
Rule 55    binary_expression -> binary_expression AND binary_expression
Rule 56    binary_expression -> binary_expression OR binary_expression
Rule 57    cast_expression -> unary_expression
Rule 58    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 59    unary_expression -> postfix_expression
Rule 60    unary_expression -> PLUSPLUS unary_expression
Rule 61    unary_expression -> MINUSMINUS unary_expression
Rule 62    unary_expression -> unary_operator cast_expression
Rule 63    postfix_expression -> primary_expression
Rule 64    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 65    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 66    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 67    postfix_expression -> postfix_expression PLUSPLUS
Rule 68    postfix_expression -> postfix_expression MINUSMINUS
Rule 69    primary_expression -> identifier
Rule 70    primary_expression -> constant
Rule 71    primary_expression -> string
Rule 72    primary_expression -> LPAREN expression RPAREN
Rule 73    identifier -> ID
Rule 74    constant -> INT_CONST
Rule 75    constant -> CHAR_CONST
Rule 76    constant -> FLOAT_CONST
Rule 77    string -> STRING
Rule 78    expression -> assignment_expression
Rule 79    expression -> expression COMMA assignment_expression
Rule 80    argument_expression -> assignment_expression
Rule 81    argument_expression -> argument_expression COMMA assignment_expression
Rule 82    assignment_expression -> binary_expression
Rule 83    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 84    assignment_operator -> EQUALS
Rule 85    assignment_operator -> TIMESEQ
Rule 86    assignment_operator -> DIVEQ
Rule 87    assignment_operator -> MODEQ
Rule 88    assignment_operator -> PLUSEQ
Rule 89    assignment_operator -> MINUSEQ
Rule 90    unary_operator -> ADDR
Rule 91    unary_operator -> TIMES
Rule 92    unary_operator -> PLUS
Rule 93    unary_operator -> MINUS
Rule 94    unary_operator -> NOT
Rule 95    initializer -> assignment_expression
Rule 96    initializer -> LBRACE initializer_list RBRACE
Rule 97    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 98    initializer_list -> initializer
Rule 99    initializer_list -> initializer_list COMMA initializer
Rule 100   block_item -> declaration
Rule 101   block_item -> statement
Rule 102   block_item_list -> block_item
Rule 103   block_item_list -> block_item_list block_item
Rule 104   block_item_list_emp -> empty
Rule 105   block_item_list_emp -> block_item_list
Rule 106   compound_statement -> LBRACE block_item_list_emp RBRACE
Rule 107   statement -> expression_statement
Rule 108   statement -> compound_statement
Rule 109   statement -> selection_statement
Rule 110   statement -> iteration_statement
Rule 111   statement -> jump_statement
Rule 112   statement -> assert_statement
Rule 113   statement -> print_statement
Rule 114   statement -> read_statement
Rule 115   expression_statement -> expression SEMI
Rule 116   selection_statement -> IF LPAREN expression RPAREN statement
Rule 117   selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 118   iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 119   iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
Rule 120   iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
Rule 121   expression_emp -> empty
Rule 122   expression_emp -> expression
Rule 123   jump_statement -> BREAK SEMI
Rule 124   jump_statement -> RETURN expression_emp SEMI
Rule 125   assert_statement -> ASSERT expression SEMI
Rule 126   print_statement -> PRINT LPAREN expression_emp RPAREN SEMI
Rule 127   read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 128   empty -> <empty>

Terminals, with rules where they appear

ADDR                 : 90
AND                  : 55
ASSERT               : 125
BREAK                : 123
CHAR                 : 9
CHAR_CONST           : 75
COMMA                : 19 34 37 79 81 97 99
DIV                  : 45
DIVEQ                : 86
ELSE                 : 117
EQ                   : 53
EQUALS               : 23 84
FLOAT                : 11
FLOAT_CONST          : 76
FOR                  : 119 120
GT                   : 51
GTE                  : 52
ID                   : 73
IF                   : 116 117
INT                  : 10
INT_CONST            : 74
LBRACE               : 96 97 106
LBRACKET             : 30 64
LPAREN               : 29 31 32 58 65 66 72 116 117 118 119 120 126 127
LT                   : 49
LTE                  : 50
MINUS                : 48 93
MINUSEQ              : 89
MINUSMINUS           : 61 68
MOD                  : 46
MODEQ                : 87
NEQ                  : 54
NOT                  : 94
OR                   : 56
PLUS                 : 47 92
PLUSEQ               : 88
PLUSPLUS             : 60 67
PRINT                : 126
RBRACE               : 96 97 106
RBRACKET             : 30 64
READ                 : 127
RETURN               : 124
RPAREN               : 29 31 32 58 65 66 72 116 117 118 119 120 126 127
SEMI                 : 17 115 119 119 120 123 124 125 126 127
STRING               : 77
TIMES                : 26 27 44 91
TIMESEQ              : 85
VOID                 : 8
WHILE                : 118
error                : 

Nonterminals, with rules where they appear

argument_expression  : 65 81 127
assert_statement     : 112
assignment_expression : 78 79 80 81 83 95
assignment_operator  : 83
binary_expression    : 40 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 82
block_item           : 102 103
block_item_list      : 103 105
block_item_list_emp  : 106
cast_expression      : 43 58 62
compound_statement   : 6 7 108
constant             : 70
constant_expression  : 42
constant_expression_emp : 30
decl_body            : 17
declaration          : 5 12 13 100 120
declaration_list     : 13 14
declaration_list_emp : 6 7
declarator           : 6 7 22 23 29 35
direct_declarator    : 24 25 30 31 32
empty                : 15 21 39 41 104 121
expression           : 64 72 79 115 116 117 118 122 125
expression_emp       : 119 119 119 120 120 124 126
expression_statement : 107
function_definition  : 4
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 28 36 37 69
identifier_list      : 37 38
identifier_list_emp  : 32
init_declarator      : 18 19
init_declarator_list : 19 20
init_declarator_list_emp : 16
initializer          : 23 98 99
initializer_list     : 96 97 99
iteration_statement  : 110
jump_statement       : 111
parameter_declaration : 33 34
parameter_list       : 31 34
pointer              : 25 27
postfix_expression   : 59 64 65 66 67 68
primary_expression   : 63
print_statement      : 113
program              : 0
read_statement       : 114
selection_statement  : 109
statement            : 101 116 117 117 118 119 120
string               : 71
type_specifier       : 7 16 35 58
unary_expression     : 57 60 61 83
unary_operator       : 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . declarator declaration_list_emp compound_statement
    (7) function_definition -> . type_specifier declarator declaration_list_emp compound_statement
    (17) declaration -> . decl_body SEMI
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    decl_body                      shift and go to state 8
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (6) function_definition -> . declarator declaration_list_emp compound_statement
    (7) function_definition -> . type_specifier declarator declaration_list_emp compound_statement
    (17) declaration -> . decl_body SEMI
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    global_declaration             shift and go to state 19
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declarator                     shift and go to state 6
    type_specifier                 shift and go to state 7
    decl_body                      shift and go to state 8
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    TIMES           reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 5

    (5) global_declaration -> declaration .

    VOID            reduce using rule 5 (global_declaration -> declaration .)
    CHAR            reduce using rule 5 (global_declaration -> declaration .)
    INT             reduce using rule 5 (global_declaration -> declaration .)
    FLOAT           reduce using rule 5 (global_declaration -> declaration .)
    LPAREN          reduce using rule 5 (global_declaration -> declaration .)
    TIMES           reduce using rule 5 (global_declaration -> declaration .)
    ID              reduce using rule 5 (global_declaration -> declaration .)
    $end            reduce using rule 5 (global_declaration -> declaration .)


state 6

    (6) function_definition -> declarator . declaration_list_emp compound_statement
    (14) declaration_list_emp -> . declaration_list
    (15) declaration_list_emp -> . empty
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (128) empty -> .
    (17) declaration -> . decl_body SEMI
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACE          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    declaration_list_emp           shift and go to state 20
    declaration_list               shift and go to state 21
    empty                          shift and go to state 22
    declaration                    shift and go to state 23
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 24

state 7

    (7) function_definition -> type_specifier . declarator declaration_list_emp compound_statement
    (16) decl_body -> type_specifier . init_declarator_list_emp
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (20) init_declarator_list_emp -> . init_declarator_list
    (21) init_declarator_list_emp -> . empty
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (73) identifier -> . ID
    (22) init_declarator -> . declarator
    (23) init_declarator -> . declarator EQUALS initializer

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    SEMI            reduce using rule 128 (empty -> .)
    ID              shift and go to state 18

    declarator                     shift and go to state 25
    init_declarator_list_emp       shift and go to state 26
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    init_declarator_list           shift and go to state 27
    empty                          shift and go to state 28
    identifier                     shift and go to state 15
    init_declarator                shift and go to state 29

state 8

    (17) declaration -> decl_body . SEMI

    SEMI            shift and go to state 30


state 9

    (24) declarator -> direct_declarator .
    (30) direct_declarator -> direct_declarator . LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (32) direct_declarator -> direct_declarator . LPAREN identifier_list_emp RPAREN

    VOID            reduce using rule 24 (declarator -> direct_declarator .)
    CHAR            reduce using rule 24 (declarator -> direct_declarator .)
    INT             reduce using rule 24 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 24 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 24 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 24 (declarator -> direct_declarator .)
    COMMA           reduce using rule 24 (declarator -> direct_declarator .)
    SEMI            reduce using rule 24 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 24 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 10

    (25) declarator -> pointer . direct_declarator
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (73) identifier -> . ID

    LPAREN          shift and go to state 16
    ID              shift and go to state 18

    direct_declarator              shift and go to state 33
    identifier                     shift and go to state 15

state 11

    (8) type_specifier -> VOID .

    LPAREN          reduce using rule 8 (type_specifier -> VOID .)
    TIMES           reduce using rule 8 (type_specifier -> VOID .)
    ID              reduce using rule 8 (type_specifier -> VOID .)
    SEMI            reduce using rule 8 (type_specifier -> VOID .)
    RPAREN          reduce using rule 8 (type_specifier -> VOID .)


state 12

    (9) type_specifier -> CHAR .

    LPAREN          reduce using rule 9 (type_specifier -> CHAR .)
    TIMES           reduce using rule 9 (type_specifier -> CHAR .)
    ID              reduce using rule 9 (type_specifier -> CHAR .)
    SEMI            reduce using rule 9 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 9 (type_specifier -> CHAR .)


state 13

    (10) type_specifier -> INT .

    LPAREN          reduce using rule 10 (type_specifier -> INT .)
    TIMES           reduce using rule 10 (type_specifier -> INT .)
    ID              reduce using rule 10 (type_specifier -> INT .)
    SEMI            reduce using rule 10 (type_specifier -> INT .)
    RPAREN          reduce using rule 10 (type_specifier -> INT .)


state 14

    (11) type_specifier -> FLOAT .

    LPAREN          reduce using rule 11 (type_specifier -> FLOAT .)
    TIMES           reduce using rule 11 (type_specifier -> FLOAT .)
    ID              reduce using rule 11 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 11 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 11 (type_specifier -> FLOAT .)


state 15

    (28) direct_declarator -> identifier .

    LBRACKET        reduce using rule 28 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 28 (direct_declarator -> identifier .)
    VOID            reduce using rule 28 (direct_declarator -> identifier .)
    CHAR            reduce using rule 28 (direct_declarator -> identifier .)
    INT             reduce using rule 28 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 28 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 28 (direct_declarator -> identifier .)
    EQUALS          reduce using rule 28 (direct_declarator -> identifier .)
    COMMA           reduce using rule 28 (direct_declarator -> identifier .)
    SEMI            reduce using rule 28 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 28 (direct_declarator -> identifier .)


state 16

    (29) direct_declarator -> LPAREN . declarator RPAREN
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 34
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 17

    (26) pointer -> TIMES .
    (27) pointer -> TIMES . pointer
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer

    LPAREN          reduce using rule 26 (pointer -> TIMES .)
    ID              reduce using rule 26 (pointer -> TIMES .)
    TIMES           shift and go to state 17

    pointer                        shift and go to state 35

state 18

    (73) identifier -> ID .

    LBRACKET        reduce using rule 73 (identifier -> ID .)
    LPAREN          reduce using rule 73 (identifier -> ID .)
    VOID            reduce using rule 73 (identifier -> ID .)
    CHAR            reduce using rule 73 (identifier -> ID .)
    INT             reduce using rule 73 (identifier -> ID .)
    FLOAT           reduce using rule 73 (identifier -> ID .)
    LBRACE          reduce using rule 73 (identifier -> ID .)
    EQUALS          reduce using rule 73 (identifier -> ID .)
    COMMA           reduce using rule 73 (identifier -> ID .)
    SEMI            reduce using rule 73 (identifier -> ID .)
    RPAREN          reduce using rule 73 (identifier -> ID .)
    PLUSPLUS        reduce using rule 73 (identifier -> ID .)
    MINUSMINUS      reduce using rule 73 (identifier -> ID .)
    TIMES           reduce using rule 73 (identifier -> ID .)
    DIV             reduce using rule 73 (identifier -> ID .)
    MOD             reduce using rule 73 (identifier -> ID .)
    PLUS            reduce using rule 73 (identifier -> ID .)
    MINUS           reduce using rule 73 (identifier -> ID .)
    LT              reduce using rule 73 (identifier -> ID .)
    LTE             reduce using rule 73 (identifier -> ID .)
    GT              reduce using rule 73 (identifier -> ID .)
    GTE             reduce using rule 73 (identifier -> ID .)
    EQ              reduce using rule 73 (identifier -> ID .)
    NEQ             reduce using rule 73 (identifier -> ID .)
    AND             reduce using rule 73 (identifier -> ID .)
    OR              reduce using rule 73 (identifier -> ID .)
    RBRACKET        reduce using rule 73 (identifier -> ID .)
    TIMESEQ         reduce using rule 73 (identifier -> ID .)
    DIVEQ           reduce using rule 73 (identifier -> ID .)
    MODEQ           reduce using rule 73 (identifier -> ID .)
    PLUSEQ          reduce using rule 73 (identifier -> ID .)
    MINUSEQ         reduce using rule 73 (identifier -> ID .)
    RBRACE          reduce using rule 73 (identifier -> ID .)


state 19

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 20

    (6) function_definition -> declarator declaration_list_emp . compound_statement
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE

    LBRACE          shift and go to state 37

    compound_statement             shift and go to state 36

state 21

    (14) declaration_list_emp -> declaration_list .
    (13) declaration_list -> declaration_list . declaration
    (17) declaration -> . decl_body SEMI
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    LBRACE          reduce using rule 14 (declaration_list_emp -> declaration_list .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    declaration                    shift and go to state 38
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 24

state 22

    (15) declaration_list_emp -> empty .

    LBRACE          reduce using rule 15 (declaration_list_emp -> empty .)


state 23

    (12) declaration_list -> declaration .

    VOID            reduce using rule 12 (declaration_list -> declaration .)
    CHAR            reduce using rule 12 (declaration_list -> declaration .)
    INT             reduce using rule 12 (declaration_list -> declaration .)
    FLOAT           reduce using rule 12 (declaration_list -> declaration .)
    LBRACE          reduce using rule 12 (declaration_list -> declaration .)


state 24

    (16) decl_body -> type_specifier . init_declarator_list_emp
    (20) init_declarator_list_emp -> . init_declarator_list
    (21) init_declarator_list_emp -> . empty
    (18) init_declarator_list -> . init_declarator
    (19) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) empty -> .
    (22) init_declarator -> . declarator
    (23) init_declarator -> . declarator EQUALS initializer
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    SEMI            reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator_list_emp       shift and go to state 26
    init_declarator_list           shift and go to state 27
    empty                          shift and go to state 28
    init_declarator                shift and go to state 29
    declarator                     shift and go to state 39
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 25

    (7) function_definition -> type_specifier declarator . declaration_list_emp compound_statement
    (22) init_declarator -> declarator .
    (23) init_declarator -> declarator . EQUALS initializer
    (14) declaration_list_emp -> . declaration_list
    (15) declaration_list_emp -> . empty
    (12) declaration_list -> . declaration
    (13) declaration_list -> . declaration_list declaration
    (128) empty -> .
    (17) declaration -> . decl_body SEMI
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    COMMA           reduce using rule 22 (init_declarator -> declarator .)
    SEMI            reduce using rule 22 (init_declarator -> declarator .)
    EQUALS          shift and go to state 41
    LBRACE          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    type_specifier                 shift and go to state 24
    declaration_list_emp           shift and go to state 40
    declaration_list               shift and go to state 21
    empty                          shift and go to state 22
    declaration                    shift and go to state 23
    decl_body                      shift and go to state 8

state 26

    (16) decl_body -> type_specifier init_declarator_list_emp .

    SEMI            reduce using rule 16 (decl_body -> type_specifier init_declarator_list_emp .)


state 27

    (20) init_declarator_list_emp -> init_declarator_list .
    (19) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 20 (init_declarator_list_emp -> init_declarator_list .)
    COMMA           shift and go to state 42


state 28

    (21) init_declarator_list_emp -> empty .

    SEMI            reduce using rule 21 (init_declarator_list_emp -> empty .)


state 29

    (18) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 18 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 18 (init_declarator_list -> init_declarator .)


state 30

    (17) declaration -> decl_body SEMI .

    VOID            reduce using rule 17 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 17 (declaration -> decl_body SEMI .)
    INT             reduce using rule 17 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 17 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 17 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 17 (declaration -> decl_body SEMI .)
    ID              reduce using rule 17 (declaration -> decl_body SEMI .)
    $end            reduce using rule 17 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 17 (declaration -> decl_body SEMI .)
    IF              reduce using rule 17 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 17 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 17 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 17 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 17 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 17 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 17 (declaration -> decl_body SEMI .)
    READ            reduce using rule 17 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 17 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 17 (declaration -> decl_body SEMI .)
    ADDR            reduce using rule 17 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 17 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 17 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 17 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 17 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 17 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 17 (declaration -> decl_body SEMI .)
    STRING          reduce using rule 17 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 17 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 17 (declaration -> decl_body SEMI .)


state 31

    (30) direct_declarator -> direct_declarator LBRACKET . constant_expression_emp RBRACKET
    (41) constant_expression_emp -> . empty
    (42) constant_expression_emp -> . constant_expression
    (128) empty -> .
    (40) constant_expression -> . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RBRACKET        reduce using rule 128 (empty -> .)
    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    constant_expression_emp        shift and go to state 43
    empty                          shift and go to state 44
    constant_expression            shift and go to state 45
    binary_expression              shift and go to state 46
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 32

    (31) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (32) direct_declarator -> direct_declarator LPAREN . identifier_list_emp RPAREN
    (33) parameter_list -> . parameter_declaration
    (34) parameter_list -> . parameter_list COMMA parameter_declaration
    (38) identifier_list_emp -> . identifier_list
    (39) identifier_list_emp -> . empty
    (35) parameter_declaration -> . type_specifier declarator
    (36) identifier_list -> . identifier
    (37) identifier_list -> . identifier_list COMMA identifier
    (128) empty -> .
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (73) identifier -> . ID

    RPAREN          reduce using rule 128 (empty -> .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    ID              shift and go to state 18

    parameter_list                 shift and go to state 67
    identifier_list_emp            shift and go to state 68
    parameter_declaration          shift and go to state 69
    identifier_list                shift and go to state 70
    empty                          shift and go to state 71
    type_specifier                 shift and go to state 72
    identifier                     shift and go to state 73

state 33

    (25) declarator -> pointer direct_declarator .
    (30) direct_declarator -> direct_declarator . LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (32) direct_declarator -> direct_declarator . LPAREN identifier_list_emp RPAREN

    VOID            reduce using rule 25 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 25 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 25 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 25 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 25 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 25 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 25 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 25 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 25 (declarator -> pointer direct_declarator .)
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 32


state 34

    (29) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 74


state 35

    (27) pointer -> TIMES pointer .

    LPAREN          reduce using rule 27 (pointer -> TIMES pointer .)
    ID              reduce using rule 27 (pointer -> TIMES pointer .)


state 36

    (6) function_definition -> declarator declaration_list_emp compound_statement .

    VOID            reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    INT             reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    TIMES           reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    ID              reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)
    $end            reduce using rule 6 (function_definition -> declarator declaration_list_emp compound_statement .)


state 37

    (106) compound_statement -> LBRACE . block_item_list_emp RBRACE
    (104) block_item_list_emp -> . empty
    (105) block_item_list_emp -> . block_item_list
    (128) empty -> .
    (102) block_item_list -> . block_item
    (103) block_item_list -> . block_item_list block_item
    (100) block_item -> . declaration
    (101) block_item -> . statement
    (17) declaration -> . decl_body SEMI
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RBRACE          reduce using rule 128 (empty -> .)
    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    block_item_list_emp            shift and go to state 75
    empty                          shift and go to state 76
    block_item_list                shift and go to state 77
    block_item                     shift and go to state 78
    declaration                    shift and go to state 79
    statement                      shift and go to state 80
    decl_body                      shift and go to state 8
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    type_specifier                 shift and go to state 24
    expression                     shift and go to state 89
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 38

    (13) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 13 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 13 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 13 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 13 (declaration_list -> declaration_list declaration .)


state 39

    (22) init_declarator -> declarator .
    (23) init_declarator -> declarator . EQUALS initializer

    COMMA           reduce using rule 22 (init_declarator -> declarator .)
    SEMI            reduce using rule 22 (init_declarator -> declarator .)
    EQUALS          shift and go to state 41


state 40

    (7) function_definition -> type_specifier declarator declaration_list_emp . compound_statement
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE

    LBRACE          shift and go to state 37

    compound_statement             shift and go to state 101

state 41

    (23) init_declarator -> declarator EQUALS . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 104
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer                    shift and go to state 102
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 42

    (19) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (22) init_declarator -> . declarator
    (23) init_declarator -> . declarator EQUALS initializer
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    init_declarator                shift and go to state 105
    declarator                     shift and go to state 39
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 43

    (30) direct_declarator -> direct_declarator LBRACKET constant_expression_emp . RBRACKET

    RBRACKET        shift and go to state 106


state 44

    (41) constant_expression_emp -> empty .

    RBRACKET        reduce using rule 41 (constant_expression_emp -> empty .)


state 45

    (42) constant_expression_emp -> constant_expression .

    RBRACKET        reduce using rule 42 (constant_expression_emp -> constant_expression .)


state 46

    (40) constant_expression -> binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 40 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119


state 47

    (43) binary_expression -> cast_expression .

    TIMES           reduce using rule 43 (binary_expression -> cast_expression .)
    DIV             reduce using rule 43 (binary_expression -> cast_expression .)
    MOD             reduce using rule 43 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 43 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 43 (binary_expression -> cast_expression .)
    LT              reduce using rule 43 (binary_expression -> cast_expression .)
    LTE             reduce using rule 43 (binary_expression -> cast_expression .)
    GT              reduce using rule 43 (binary_expression -> cast_expression .)
    GTE             reduce using rule 43 (binary_expression -> cast_expression .)
    EQ              reduce using rule 43 (binary_expression -> cast_expression .)
    NEQ             reduce using rule 43 (binary_expression -> cast_expression .)
    AND             reduce using rule 43 (binary_expression -> cast_expression .)
    OR              reduce using rule 43 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 43 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 43 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 43 (binary_expression -> cast_expression .)


state 48

    (91) unary_operator -> TIMES .

    LPAREN          reduce using rule 91 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 91 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 91 (unary_operator -> TIMES .)
    ADDR            reduce using rule 91 (unary_operator -> TIMES .)
    TIMES           reduce using rule 91 (unary_operator -> TIMES .)
    PLUS            reduce using rule 91 (unary_operator -> TIMES .)
    MINUS           reduce using rule 91 (unary_operator -> TIMES .)
    NOT             reduce using rule 91 (unary_operator -> TIMES .)
    ID              reduce using rule 91 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 91 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 91 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 91 (unary_operator -> TIMES .)
    STRING          reduce using rule 91 (unary_operator -> TIMES .)


state 49

    (92) unary_operator -> PLUS .

    LPAREN          reduce using rule 92 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 92 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 92 (unary_operator -> PLUS .)
    ADDR            reduce using rule 92 (unary_operator -> PLUS .)
    TIMES           reduce using rule 92 (unary_operator -> PLUS .)
    PLUS            reduce using rule 92 (unary_operator -> PLUS .)
    MINUS           reduce using rule 92 (unary_operator -> PLUS .)
    NOT             reduce using rule 92 (unary_operator -> PLUS .)
    ID              reduce using rule 92 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 92 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 92 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 92 (unary_operator -> PLUS .)
    STRING          reduce using rule 92 (unary_operator -> PLUS .)


state 50

    (93) unary_operator -> MINUS .

    LPAREN          reduce using rule 93 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 93 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 93 (unary_operator -> MINUS .)
    ADDR            reduce using rule 93 (unary_operator -> MINUS .)
    TIMES           reduce using rule 93 (unary_operator -> MINUS .)
    PLUS            reduce using rule 93 (unary_operator -> MINUS .)
    MINUS           reduce using rule 93 (unary_operator -> MINUS .)
    NOT             reduce using rule 93 (unary_operator -> MINUS .)
    ID              reduce using rule 93 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 93 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 93 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 93 (unary_operator -> MINUS .)
    STRING          reduce using rule 93 (unary_operator -> MINUS .)


state 51

    (57) cast_expression -> unary_expression .

    TIMES           reduce using rule 57 (cast_expression -> unary_expression .)
    DIV             reduce using rule 57 (cast_expression -> unary_expression .)
    MOD             reduce using rule 57 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 57 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 57 (cast_expression -> unary_expression .)
    LT              reduce using rule 57 (cast_expression -> unary_expression .)
    LTE             reduce using rule 57 (cast_expression -> unary_expression .)
    GT              reduce using rule 57 (cast_expression -> unary_expression .)
    GTE             reduce using rule 57 (cast_expression -> unary_expression .)
    EQ              reduce using rule 57 (cast_expression -> unary_expression .)
    NEQ             reduce using rule 57 (cast_expression -> unary_expression .)
    AND             reduce using rule 57 (cast_expression -> unary_expression .)
    OR              reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 57 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 57 (cast_expression -> unary_expression .)
    TIMESEQ         reduce using rule 57 (cast_expression -> unary_expression .)
    DIVEQ           reduce using rule 57 (cast_expression -> unary_expression .)
    MODEQ           reduce using rule 57 (cast_expression -> unary_expression .)
    PLUSEQ          reduce using rule 57 (cast_expression -> unary_expression .)
    MINUSEQ         reduce using rule 57 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 57 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 57 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 57 (cast_expression -> unary_expression .)


state 52

    (58) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (72) primary_expression -> LPAREN . expression RPAREN
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    type_specifier                 shift and go to state 120
    cast_expression                shift and go to state 47
    expression                     shift and go to state 121
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 53

    (59) unary_expression -> postfix_expression .
    (64) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (65) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (66) postfix_expression -> postfix_expression . LPAREN RPAREN
    (67) postfix_expression -> postfix_expression . PLUSPLUS
    (68) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 59 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 59 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 59 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 59 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 59 (unary_expression -> postfix_expression .)
    LT              reduce using rule 59 (unary_expression -> postfix_expression .)
    LTE             reduce using rule 59 (unary_expression -> postfix_expression .)
    GT              reduce using rule 59 (unary_expression -> postfix_expression .)
    GTE             reduce using rule 59 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 59 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 59 (unary_expression -> postfix_expression .)
    AND             reduce using rule 59 (unary_expression -> postfix_expression .)
    OR              reduce using rule 59 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 59 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 59 (unary_expression -> postfix_expression .)
    TIMESEQ         reduce using rule 59 (unary_expression -> postfix_expression .)
    DIVEQ           reduce using rule 59 (unary_expression -> postfix_expression .)
    MODEQ           reduce using rule 59 (unary_expression -> postfix_expression .)
    PLUSEQ          reduce using rule 59 (unary_expression -> postfix_expression .)
    MINUSEQ         reduce using rule 59 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 59 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 59 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 59 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 59 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 122
    LPAREN          shift and go to state 123
    PLUSPLUS        shift and go to state 124
    MINUSMINUS      shift and go to state 125


state 54

    (60) unary_expression -> PLUSPLUS . unary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    LPAREN          shift and go to state 127
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 126
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 55

    (61) unary_expression -> MINUSMINUS . unary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    LPAREN          shift and go to state 127
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 128
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 56

    (62) unary_expression -> unary_operator . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_operator                 shift and go to state 56
    cast_expression                shift and go to state 129
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 57

    (63) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 63 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 63 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 63 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 63 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 63 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 63 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 63 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 63 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 63 (postfix_expression -> primary_expression .)
    LT              reduce using rule 63 (postfix_expression -> primary_expression .)
    LTE             reduce using rule 63 (postfix_expression -> primary_expression .)
    GT              reduce using rule 63 (postfix_expression -> primary_expression .)
    GTE             reduce using rule 63 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 63 (postfix_expression -> primary_expression .)
    NEQ             reduce using rule 63 (postfix_expression -> primary_expression .)
    AND             reduce using rule 63 (postfix_expression -> primary_expression .)
    OR              reduce using rule 63 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 63 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 63 (postfix_expression -> primary_expression .)
    TIMESEQ         reduce using rule 63 (postfix_expression -> primary_expression .)
    DIVEQ           reduce using rule 63 (postfix_expression -> primary_expression .)
    MODEQ           reduce using rule 63 (postfix_expression -> primary_expression .)
    PLUSEQ          reduce using rule 63 (postfix_expression -> primary_expression .)
    MINUSEQ         reduce using rule 63 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 63 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 63 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 63 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 63 (postfix_expression -> primary_expression .)


state 58

    (90) unary_operator -> ADDR .

    LPAREN          reduce using rule 90 (unary_operator -> ADDR .)
    PLUSPLUS        reduce using rule 90 (unary_operator -> ADDR .)
    MINUSMINUS      reduce using rule 90 (unary_operator -> ADDR .)
    ADDR            reduce using rule 90 (unary_operator -> ADDR .)
    TIMES           reduce using rule 90 (unary_operator -> ADDR .)
    PLUS            reduce using rule 90 (unary_operator -> ADDR .)
    MINUS           reduce using rule 90 (unary_operator -> ADDR .)
    NOT             reduce using rule 90 (unary_operator -> ADDR .)
    ID              reduce using rule 90 (unary_operator -> ADDR .)
    INT_CONST       reduce using rule 90 (unary_operator -> ADDR .)
    CHAR_CONST      reduce using rule 90 (unary_operator -> ADDR .)
    FLOAT_CONST     reduce using rule 90 (unary_operator -> ADDR .)
    STRING          reduce using rule 90 (unary_operator -> ADDR .)


state 59

    (94) unary_operator -> NOT .

    LPAREN          reduce using rule 94 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 94 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 94 (unary_operator -> NOT .)
    ADDR            reduce using rule 94 (unary_operator -> NOT .)
    TIMES           reduce using rule 94 (unary_operator -> NOT .)
    PLUS            reduce using rule 94 (unary_operator -> NOT .)
    MINUS           reduce using rule 94 (unary_operator -> NOT .)
    NOT             reduce using rule 94 (unary_operator -> NOT .)
    ID              reduce using rule 94 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 94 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 94 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 94 (unary_operator -> NOT .)
    STRING          reduce using rule 94 (unary_operator -> NOT .)


state 60

    (69) primary_expression -> identifier .

    LBRACKET        reduce using rule 69 (primary_expression -> identifier .)
    LPAREN          reduce using rule 69 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 69 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 69 (primary_expression -> identifier .)
    TIMES           reduce using rule 69 (primary_expression -> identifier .)
    DIV             reduce using rule 69 (primary_expression -> identifier .)
    MOD             reduce using rule 69 (primary_expression -> identifier .)
    PLUS            reduce using rule 69 (primary_expression -> identifier .)
    MINUS           reduce using rule 69 (primary_expression -> identifier .)
    LT              reduce using rule 69 (primary_expression -> identifier .)
    LTE             reduce using rule 69 (primary_expression -> identifier .)
    GT              reduce using rule 69 (primary_expression -> identifier .)
    GTE             reduce using rule 69 (primary_expression -> identifier .)
    EQ              reduce using rule 69 (primary_expression -> identifier .)
    NEQ             reduce using rule 69 (primary_expression -> identifier .)
    AND             reduce using rule 69 (primary_expression -> identifier .)
    OR              reduce using rule 69 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 69 (primary_expression -> identifier .)
    EQUALS          reduce using rule 69 (primary_expression -> identifier .)
    TIMESEQ         reduce using rule 69 (primary_expression -> identifier .)
    DIVEQ           reduce using rule 69 (primary_expression -> identifier .)
    MODEQ           reduce using rule 69 (primary_expression -> identifier .)
    PLUSEQ          reduce using rule 69 (primary_expression -> identifier .)
    MINUSEQ         reduce using rule 69 (primary_expression -> identifier .)
    SEMI            reduce using rule 69 (primary_expression -> identifier .)
    COMMA           reduce using rule 69 (primary_expression -> identifier .)
    RPAREN          reduce using rule 69 (primary_expression -> identifier .)
    RBRACE          reduce using rule 69 (primary_expression -> identifier .)


state 61

    (70) primary_expression -> constant .

    LBRACKET        reduce using rule 70 (primary_expression -> constant .)
    LPAREN          reduce using rule 70 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 70 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 70 (primary_expression -> constant .)
    TIMES           reduce using rule 70 (primary_expression -> constant .)
    DIV             reduce using rule 70 (primary_expression -> constant .)
    MOD             reduce using rule 70 (primary_expression -> constant .)
    PLUS            reduce using rule 70 (primary_expression -> constant .)
    MINUS           reduce using rule 70 (primary_expression -> constant .)
    LT              reduce using rule 70 (primary_expression -> constant .)
    LTE             reduce using rule 70 (primary_expression -> constant .)
    GT              reduce using rule 70 (primary_expression -> constant .)
    GTE             reduce using rule 70 (primary_expression -> constant .)
    EQ              reduce using rule 70 (primary_expression -> constant .)
    NEQ             reduce using rule 70 (primary_expression -> constant .)
    AND             reduce using rule 70 (primary_expression -> constant .)
    OR              reduce using rule 70 (primary_expression -> constant .)
    RBRACKET        reduce using rule 70 (primary_expression -> constant .)
    EQUALS          reduce using rule 70 (primary_expression -> constant .)
    TIMESEQ         reduce using rule 70 (primary_expression -> constant .)
    DIVEQ           reduce using rule 70 (primary_expression -> constant .)
    MODEQ           reduce using rule 70 (primary_expression -> constant .)
    PLUSEQ          reduce using rule 70 (primary_expression -> constant .)
    MINUSEQ         reduce using rule 70 (primary_expression -> constant .)
    SEMI            reduce using rule 70 (primary_expression -> constant .)
    COMMA           reduce using rule 70 (primary_expression -> constant .)
    RPAREN          reduce using rule 70 (primary_expression -> constant .)
    RBRACE          reduce using rule 70 (primary_expression -> constant .)


state 62

    (71) primary_expression -> string .

    LBRACKET        reduce using rule 71 (primary_expression -> string .)
    LPAREN          reduce using rule 71 (primary_expression -> string .)
    PLUSPLUS        reduce using rule 71 (primary_expression -> string .)
    MINUSMINUS      reduce using rule 71 (primary_expression -> string .)
    TIMES           reduce using rule 71 (primary_expression -> string .)
    DIV             reduce using rule 71 (primary_expression -> string .)
    MOD             reduce using rule 71 (primary_expression -> string .)
    PLUS            reduce using rule 71 (primary_expression -> string .)
    MINUS           reduce using rule 71 (primary_expression -> string .)
    LT              reduce using rule 71 (primary_expression -> string .)
    LTE             reduce using rule 71 (primary_expression -> string .)
    GT              reduce using rule 71 (primary_expression -> string .)
    GTE             reduce using rule 71 (primary_expression -> string .)
    EQ              reduce using rule 71 (primary_expression -> string .)
    NEQ             reduce using rule 71 (primary_expression -> string .)
    AND             reduce using rule 71 (primary_expression -> string .)
    OR              reduce using rule 71 (primary_expression -> string .)
    RBRACKET        reduce using rule 71 (primary_expression -> string .)
    EQUALS          reduce using rule 71 (primary_expression -> string .)
    TIMESEQ         reduce using rule 71 (primary_expression -> string .)
    DIVEQ           reduce using rule 71 (primary_expression -> string .)
    MODEQ           reduce using rule 71 (primary_expression -> string .)
    PLUSEQ          reduce using rule 71 (primary_expression -> string .)
    MINUSEQ         reduce using rule 71 (primary_expression -> string .)
    SEMI            reduce using rule 71 (primary_expression -> string .)
    COMMA           reduce using rule 71 (primary_expression -> string .)
    RPAREN          reduce using rule 71 (primary_expression -> string .)
    RBRACE          reduce using rule 71 (primary_expression -> string .)


state 63

    (74) constant -> INT_CONST .

    LBRACKET        reduce using rule 74 (constant -> INT_CONST .)
    LPAREN          reduce using rule 74 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 74 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 74 (constant -> INT_CONST .)
    TIMES           reduce using rule 74 (constant -> INT_CONST .)
    DIV             reduce using rule 74 (constant -> INT_CONST .)
    MOD             reduce using rule 74 (constant -> INT_CONST .)
    PLUS            reduce using rule 74 (constant -> INT_CONST .)
    MINUS           reduce using rule 74 (constant -> INT_CONST .)
    LT              reduce using rule 74 (constant -> INT_CONST .)
    LTE             reduce using rule 74 (constant -> INT_CONST .)
    GT              reduce using rule 74 (constant -> INT_CONST .)
    GTE             reduce using rule 74 (constant -> INT_CONST .)
    EQ              reduce using rule 74 (constant -> INT_CONST .)
    NEQ             reduce using rule 74 (constant -> INT_CONST .)
    AND             reduce using rule 74 (constant -> INT_CONST .)
    OR              reduce using rule 74 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 74 (constant -> INT_CONST .)
    EQUALS          reduce using rule 74 (constant -> INT_CONST .)
    TIMESEQ         reduce using rule 74 (constant -> INT_CONST .)
    DIVEQ           reduce using rule 74 (constant -> INT_CONST .)
    MODEQ           reduce using rule 74 (constant -> INT_CONST .)
    PLUSEQ          reduce using rule 74 (constant -> INT_CONST .)
    MINUSEQ         reduce using rule 74 (constant -> INT_CONST .)
    SEMI            reduce using rule 74 (constant -> INT_CONST .)
    COMMA           reduce using rule 74 (constant -> INT_CONST .)
    RPAREN          reduce using rule 74 (constant -> INT_CONST .)
    RBRACE          reduce using rule 74 (constant -> INT_CONST .)


state 64

    (75) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 75 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 75 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 75 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 75 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 75 (constant -> CHAR_CONST .)
    DIV             reduce using rule 75 (constant -> CHAR_CONST .)
    MOD             reduce using rule 75 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 75 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 75 (constant -> CHAR_CONST .)
    LT              reduce using rule 75 (constant -> CHAR_CONST .)
    LTE             reduce using rule 75 (constant -> CHAR_CONST .)
    GT              reduce using rule 75 (constant -> CHAR_CONST .)
    GTE             reduce using rule 75 (constant -> CHAR_CONST .)
    EQ              reduce using rule 75 (constant -> CHAR_CONST .)
    NEQ             reduce using rule 75 (constant -> CHAR_CONST .)
    AND             reduce using rule 75 (constant -> CHAR_CONST .)
    OR              reduce using rule 75 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 75 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 75 (constant -> CHAR_CONST .)
    TIMESEQ         reduce using rule 75 (constant -> CHAR_CONST .)
    DIVEQ           reduce using rule 75 (constant -> CHAR_CONST .)
    MODEQ           reduce using rule 75 (constant -> CHAR_CONST .)
    PLUSEQ          reduce using rule 75 (constant -> CHAR_CONST .)
    MINUSEQ         reduce using rule 75 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 75 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 75 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 75 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 75 (constant -> CHAR_CONST .)


state 65

    (76) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 76 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 76 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 76 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 76 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 76 (constant -> FLOAT_CONST .)
    DIV             reduce using rule 76 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 76 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 76 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 76 (constant -> FLOAT_CONST .)
    LT              reduce using rule 76 (constant -> FLOAT_CONST .)
    LTE             reduce using rule 76 (constant -> FLOAT_CONST .)
    GT              reduce using rule 76 (constant -> FLOAT_CONST .)
    GTE             reduce using rule 76 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 76 (constant -> FLOAT_CONST .)
    NEQ             reduce using rule 76 (constant -> FLOAT_CONST .)
    AND             reduce using rule 76 (constant -> FLOAT_CONST .)
    OR              reduce using rule 76 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 76 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 76 (constant -> FLOAT_CONST .)
    TIMESEQ         reduce using rule 76 (constant -> FLOAT_CONST .)
    DIVEQ           reduce using rule 76 (constant -> FLOAT_CONST .)
    MODEQ           reduce using rule 76 (constant -> FLOAT_CONST .)
    PLUSEQ          reduce using rule 76 (constant -> FLOAT_CONST .)
    MINUSEQ         reduce using rule 76 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 76 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 76 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 76 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 76 (constant -> FLOAT_CONST .)


state 66

    (77) string -> STRING .

    LBRACKET        reduce using rule 77 (string -> STRING .)
    LPAREN          reduce using rule 77 (string -> STRING .)
    PLUSPLUS        reduce using rule 77 (string -> STRING .)
    MINUSMINUS      reduce using rule 77 (string -> STRING .)
    TIMES           reduce using rule 77 (string -> STRING .)
    DIV             reduce using rule 77 (string -> STRING .)
    MOD             reduce using rule 77 (string -> STRING .)
    PLUS            reduce using rule 77 (string -> STRING .)
    MINUS           reduce using rule 77 (string -> STRING .)
    LT              reduce using rule 77 (string -> STRING .)
    LTE             reduce using rule 77 (string -> STRING .)
    GT              reduce using rule 77 (string -> STRING .)
    GTE             reduce using rule 77 (string -> STRING .)
    EQ              reduce using rule 77 (string -> STRING .)
    NEQ             reduce using rule 77 (string -> STRING .)
    AND             reduce using rule 77 (string -> STRING .)
    OR              reduce using rule 77 (string -> STRING .)
    RBRACKET        reduce using rule 77 (string -> STRING .)
    EQUALS          reduce using rule 77 (string -> STRING .)
    TIMESEQ         reduce using rule 77 (string -> STRING .)
    DIVEQ           reduce using rule 77 (string -> STRING .)
    MODEQ           reduce using rule 77 (string -> STRING .)
    PLUSEQ          reduce using rule 77 (string -> STRING .)
    MINUSEQ         reduce using rule 77 (string -> STRING .)
    SEMI            reduce using rule 77 (string -> STRING .)
    COMMA           reduce using rule 77 (string -> STRING .)
    RPAREN          reduce using rule 77 (string -> STRING .)
    RBRACE          reduce using rule 77 (string -> STRING .)


state 67

    (31) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (34) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 131


state 68

    (32) direct_declarator -> direct_declarator LPAREN identifier_list_emp . RPAREN

    RPAREN          shift and go to state 132


state 69

    (33) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 33 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 33 (parameter_list -> parameter_declaration .)


state 70

    (38) identifier_list_emp -> identifier_list .
    (37) identifier_list -> identifier_list . COMMA identifier

    RPAREN          reduce using rule 38 (identifier_list_emp -> identifier_list .)
    COMMA           shift and go to state 133


state 71

    (39) identifier_list_emp -> empty .

    RPAREN          reduce using rule 39 (identifier_list_emp -> empty .)


state 72

    (35) parameter_declaration -> type_specifier . declarator
    (24) declarator -> . direct_declarator
    (25) declarator -> . pointer direct_declarator
    (28) direct_declarator -> . identifier
    (29) direct_declarator -> . LPAREN declarator RPAREN
    (30) direct_declarator -> . direct_declarator LBRACKET constant_expression_emp RBRACKET
    (31) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (32) direct_declarator -> . direct_declarator LPAREN identifier_list_emp RPAREN
    (26) pointer -> . TIMES
    (27) pointer -> . TIMES pointer
    (73) identifier -> . ID

    LPAREN          shift and go to state 16
    TIMES           shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 134
    direct_declarator              shift and go to state 9
    pointer                        shift and go to state 10
    identifier                     shift and go to state 15

state 73

    (36) identifier_list -> identifier .

    COMMA           reduce using rule 36 (identifier_list -> identifier .)
    RPAREN          reduce using rule 36 (identifier_list -> identifier .)


state 74

    (29) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    EQUALS          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 29 (direct_declarator -> LPAREN declarator RPAREN .)


state 75

    (106) compound_statement -> LBRACE block_item_list_emp . RBRACE

    RBRACE          shift and go to state 135


state 76

    (104) block_item_list_emp -> empty .

    RBRACE          reduce using rule 104 (block_item_list_emp -> empty .)


state 77

    (105) block_item_list_emp -> block_item_list .
    (103) block_item_list -> block_item_list . block_item
    (100) block_item -> . declaration
    (101) block_item -> . statement
    (17) declaration -> . decl_body SEMI
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RBRACE          reduce using rule 105 (block_item_list_emp -> block_item_list .)
    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    block_item                     shift and go to state 136
    declaration                    shift and go to state 79
    statement                      shift and go to state 80
    decl_body                      shift and go to state 8
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    type_specifier                 shift and go to state 24
    expression                     shift and go to state 89
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 78

    (102) block_item_list -> block_item .

    LBRACE          reduce using rule 102 (block_item_list -> block_item .)
    IF              reduce using rule 102 (block_item_list -> block_item .)
    WHILE           reduce using rule 102 (block_item_list -> block_item .)
    FOR             reduce using rule 102 (block_item_list -> block_item .)
    BREAK           reduce using rule 102 (block_item_list -> block_item .)
    RETURN          reduce using rule 102 (block_item_list -> block_item .)
    ASSERT          reduce using rule 102 (block_item_list -> block_item .)
    PRINT           reduce using rule 102 (block_item_list -> block_item .)
    READ            reduce using rule 102 (block_item_list -> block_item .)
    VOID            reduce using rule 102 (block_item_list -> block_item .)
    CHAR            reduce using rule 102 (block_item_list -> block_item .)
    INT             reduce using rule 102 (block_item_list -> block_item .)
    FLOAT           reduce using rule 102 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 102 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 102 (block_item_list -> block_item .)
    LPAREN          reduce using rule 102 (block_item_list -> block_item .)
    ADDR            reduce using rule 102 (block_item_list -> block_item .)
    TIMES           reduce using rule 102 (block_item_list -> block_item .)
    PLUS            reduce using rule 102 (block_item_list -> block_item .)
    MINUS           reduce using rule 102 (block_item_list -> block_item .)
    NOT             reduce using rule 102 (block_item_list -> block_item .)
    ID              reduce using rule 102 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 102 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 102 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 102 (block_item_list -> block_item .)
    STRING          reduce using rule 102 (block_item_list -> block_item .)
    RBRACE          reduce using rule 102 (block_item_list -> block_item .)


state 79

    (100) block_item -> declaration .

    LBRACE          reduce using rule 100 (block_item -> declaration .)
    IF              reduce using rule 100 (block_item -> declaration .)
    WHILE           reduce using rule 100 (block_item -> declaration .)
    FOR             reduce using rule 100 (block_item -> declaration .)
    BREAK           reduce using rule 100 (block_item -> declaration .)
    RETURN          reduce using rule 100 (block_item -> declaration .)
    ASSERT          reduce using rule 100 (block_item -> declaration .)
    PRINT           reduce using rule 100 (block_item -> declaration .)
    READ            reduce using rule 100 (block_item -> declaration .)
    VOID            reduce using rule 100 (block_item -> declaration .)
    CHAR            reduce using rule 100 (block_item -> declaration .)
    INT             reduce using rule 100 (block_item -> declaration .)
    FLOAT           reduce using rule 100 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 100 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 100 (block_item -> declaration .)
    LPAREN          reduce using rule 100 (block_item -> declaration .)
    ADDR            reduce using rule 100 (block_item -> declaration .)
    TIMES           reduce using rule 100 (block_item -> declaration .)
    PLUS            reduce using rule 100 (block_item -> declaration .)
    MINUS           reduce using rule 100 (block_item -> declaration .)
    NOT             reduce using rule 100 (block_item -> declaration .)
    ID              reduce using rule 100 (block_item -> declaration .)
    INT_CONST       reduce using rule 100 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 100 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 100 (block_item -> declaration .)
    STRING          reduce using rule 100 (block_item -> declaration .)
    RBRACE          reduce using rule 100 (block_item -> declaration .)


state 80

    (101) block_item -> statement .

    LBRACE          reduce using rule 101 (block_item -> statement .)
    IF              reduce using rule 101 (block_item -> statement .)
    WHILE           reduce using rule 101 (block_item -> statement .)
    FOR             reduce using rule 101 (block_item -> statement .)
    BREAK           reduce using rule 101 (block_item -> statement .)
    RETURN          reduce using rule 101 (block_item -> statement .)
    ASSERT          reduce using rule 101 (block_item -> statement .)
    PRINT           reduce using rule 101 (block_item -> statement .)
    READ            reduce using rule 101 (block_item -> statement .)
    VOID            reduce using rule 101 (block_item -> statement .)
    CHAR            reduce using rule 101 (block_item -> statement .)
    INT             reduce using rule 101 (block_item -> statement .)
    FLOAT           reduce using rule 101 (block_item -> statement .)
    PLUSPLUS        reduce using rule 101 (block_item -> statement .)
    MINUSMINUS      reduce using rule 101 (block_item -> statement .)
    LPAREN          reduce using rule 101 (block_item -> statement .)
    ADDR            reduce using rule 101 (block_item -> statement .)
    TIMES           reduce using rule 101 (block_item -> statement .)
    PLUS            reduce using rule 101 (block_item -> statement .)
    MINUS           reduce using rule 101 (block_item -> statement .)
    NOT             reduce using rule 101 (block_item -> statement .)
    ID              reduce using rule 101 (block_item -> statement .)
    INT_CONST       reduce using rule 101 (block_item -> statement .)
    CHAR_CONST      reduce using rule 101 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 101 (block_item -> statement .)
    STRING          reduce using rule 101 (block_item -> statement .)
    RBRACE          reduce using rule 101 (block_item -> statement .)


state 81

    (107) statement -> expression_statement .

    LBRACE          reduce using rule 107 (statement -> expression_statement .)
    IF              reduce using rule 107 (statement -> expression_statement .)
    WHILE           reduce using rule 107 (statement -> expression_statement .)
    FOR             reduce using rule 107 (statement -> expression_statement .)
    BREAK           reduce using rule 107 (statement -> expression_statement .)
    RETURN          reduce using rule 107 (statement -> expression_statement .)
    ASSERT          reduce using rule 107 (statement -> expression_statement .)
    PRINT           reduce using rule 107 (statement -> expression_statement .)
    READ            reduce using rule 107 (statement -> expression_statement .)
    VOID            reduce using rule 107 (statement -> expression_statement .)
    CHAR            reduce using rule 107 (statement -> expression_statement .)
    INT             reduce using rule 107 (statement -> expression_statement .)
    FLOAT           reduce using rule 107 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 107 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 107 (statement -> expression_statement .)
    LPAREN          reduce using rule 107 (statement -> expression_statement .)
    ADDR            reduce using rule 107 (statement -> expression_statement .)
    TIMES           reduce using rule 107 (statement -> expression_statement .)
    PLUS            reduce using rule 107 (statement -> expression_statement .)
    MINUS           reduce using rule 107 (statement -> expression_statement .)
    NOT             reduce using rule 107 (statement -> expression_statement .)
    ID              reduce using rule 107 (statement -> expression_statement .)
    INT_CONST       reduce using rule 107 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 107 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 107 (statement -> expression_statement .)
    STRING          reduce using rule 107 (statement -> expression_statement .)
    RBRACE          reduce using rule 107 (statement -> expression_statement .)
    ELSE            reduce using rule 107 (statement -> expression_statement .)


state 82

    (108) statement -> compound_statement .

    LBRACE          reduce using rule 108 (statement -> compound_statement .)
    IF              reduce using rule 108 (statement -> compound_statement .)
    WHILE           reduce using rule 108 (statement -> compound_statement .)
    FOR             reduce using rule 108 (statement -> compound_statement .)
    BREAK           reduce using rule 108 (statement -> compound_statement .)
    RETURN          reduce using rule 108 (statement -> compound_statement .)
    ASSERT          reduce using rule 108 (statement -> compound_statement .)
    PRINT           reduce using rule 108 (statement -> compound_statement .)
    READ            reduce using rule 108 (statement -> compound_statement .)
    VOID            reduce using rule 108 (statement -> compound_statement .)
    CHAR            reduce using rule 108 (statement -> compound_statement .)
    INT             reduce using rule 108 (statement -> compound_statement .)
    FLOAT           reduce using rule 108 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 108 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 108 (statement -> compound_statement .)
    LPAREN          reduce using rule 108 (statement -> compound_statement .)
    ADDR            reduce using rule 108 (statement -> compound_statement .)
    TIMES           reduce using rule 108 (statement -> compound_statement .)
    PLUS            reduce using rule 108 (statement -> compound_statement .)
    MINUS           reduce using rule 108 (statement -> compound_statement .)
    NOT             reduce using rule 108 (statement -> compound_statement .)
    ID              reduce using rule 108 (statement -> compound_statement .)
    INT_CONST       reduce using rule 108 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 108 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 108 (statement -> compound_statement .)
    STRING          reduce using rule 108 (statement -> compound_statement .)
    RBRACE          reduce using rule 108 (statement -> compound_statement .)
    ELSE            reduce using rule 108 (statement -> compound_statement .)


state 83

    (109) statement -> selection_statement .

    LBRACE          reduce using rule 109 (statement -> selection_statement .)
    IF              reduce using rule 109 (statement -> selection_statement .)
    WHILE           reduce using rule 109 (statement -> selection_statement .)
    FOR             reduce using rule 109 (statement -> selection_statement .)
    BREAK           reduce using rule 109 (statement -> selection_statement .)
    RETURN          reduce using rule 109 (statement -> selection_statement .)
    ASSERT          reduce using rule 109 (statement -> selection_statement .)
    PRINT           reduce using rule 109 (statement -> selection_statement .)
    READ            reduce using rule 109 (statement -> selection_statement .)
    VOID            reduce using rule 109 (statement -> selection_statement .)
    CHAR            reduce using rule 109 (statement -> selection_statement .)
    INT             reduce using rule 109 (statement -> selection_statement .)
    FLOAT           reduce using rule 109 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 109 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 109 (statement -> selection_statement .)
    LPAREN          reduce using rule 109 (statement -> selection_statement .)
    ADDR            reduce using rule 109 (statement -> selection_statement .)
    TIMES           reduce using rule 109 (statement -> selection_statement .)
    PLUS            reduce using rule 109 (statement -> selection_statement .)
    MINUS           reduce using rule 109 (statement -> selection_statement .)
    NOT             reduce using rule 109 (statement -> selection_statement .)
    ID              reduce using rule 109 (statement -> selection_statement .)
    INT_CONST       reduce using rule 109 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 109 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 109 (statement -> selection_statement .)
    STRING          reduce using rule 109 (statement -> selection_statement .)
    RBRACE          reduce using rule 109 (statement -> selection_statement .)
    ELSE            reduce using rule 109 (statement -> selection_statement .)


state 84

    (110) statement -> iteration_statement .

    LBRACE          reduce using rule 110 (statement -> iteration_statement .)
    IF              reduce using rule 110 (statement -> iteration_statement .)
    WHILE           reduce using rule 110 (statement -> iteration_statement .)
    FOR             reduce using rule 110 (statement -> iteration_statement .)
    BREAK           reduce using rule 110 (statement -> iteration_statement .)
    RETURN          reduce using rule 110 (statement -> iteration_statement .)
    ASSERT          reduce using rule 110 (statement -> iteration_statement .)
    PRINT           reduce using rule 110 (statement -> iteration_statement .)
    READ            reduce using rule 110 (statement -> iteration_statement .)
    VOID            reduce using rule 110 (statement -> iteration_statement .)
    CHAR            reduce using rule 110 (statement -> iteration_statement .)
    INT             reduce using rule 110 (statement -> iteration_statement .)
    FLOAT           reduce using rule 110 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 110 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 110 (statement -> iteration_statement .)
    LPAREN          reduce using rule 110 (statement -> iteration_statement .)
    ADDR            reduce using rule 110 (statement -> iteration_statement .)
    TIMES           reduce using rule 110 (statement -> iteration_statement .)
    PLUS            reduce using rule 110 (statement -> iteration_statement .)
    MINUS           reduce using rule 110 (statement -> iteration_statement .)
    NOT             reduce using rule 110 (statement -> iteration_statement .)
    ID              reduce using rule 110 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 110 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 110 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 110 (statement -> iteration_statement .)
    STRING          reduce using rule 110 (statement -> iteration_statement .)
    RBRACE          reduce using rule 110 (statement -> iteration_statement .)
    ELSE            reduce using rule 110 (statement -> iteration_statement .)


state 85

    (111) statement -> jump_statement .

    LBRACE          reduce using rule 111 (statement -> jump_statement .)
    IF              reduce using rule 111 (statement -> jump_statement .)
    WHILE           reduce using rule 111 (statement -> jump_statement .)
    FOR             reduce using rule 111 (statement -> jump_statement .)
    BREAK           reduce using rule 111 (statement -> jump_statement .)
    RETURN          reduce using rule 111 (statement -> jump_statement .)
    ASSERT          reduce using rule 111 (statement -> jump_statement .)
    PRINT           reduce using rule 111 (statement -> jump_statement .)
    READ            reduce using rule 111 (statement -> jump_statement .)
    VOID            reduce using rule 111 (statement -> jump_statement .)
    CHAR            reduce using rule 111 (statement -> jump_statement .)
    INT             reduce using rule 111 (statement -> jump_statement .)
    FLOAT           reduce using rule 111 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 111 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 111 (statement -> jump_statement .)
    LPAREN          reduce using rule 111 (statement -> jump_statement .)
    ADDR            reduce using rule 111 (statement -> jump_statement .)
    TIMES           reduce using rule 111 (statement -> jump_statement .)
    PLUS            reduce using rule 111 (statement -> jump_statement .)
    MINUS           reduce using rule 111 (statement -> jump_statement .)
    NOT             reduce using rule 111 (statement -> jump_statement .)
    ID              reduce using rule 111 (statement -> jump_statement .)
    INT_CONST       reduce using rule 111 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 111 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 111 (statement -> jump_statement .)
    STRING          reduce using rule 111 (statement -> jump_statement .)
    RBRACE          reduce using rule 111 (statement -> jump_statement .)
    ELSE            reduce using rule 111 (statement -> jump_statement .)


state 86

    (112) statement -> assert_statement .

    LBRACE          reduce using rule 112 (statement -> assert_statement .)
    IF              reduce using rule 112 (statement -> assert_statement .)
    WHILE           reduce using rule 112 (statement -> assert_statement .)
    FOR             reduce using rule 112 (statement -> assert_statement .)
    BREAK           reduce using rule 112 (statement -> assert_statement .)
    RETURN          reduce using rule 112 (statement -> assert_statement .)
    ASSERT          reduce using rule 112 (statement -> assert_statement .)
    PRINT           reduce using rule 112 (statement -> assert_statement .)
    READ            reduce using rule 112 (statement -> assert_statement .)
    VOID            reduce using rule 112 (statement -> assert_statement .)
    CHAR            reduce using rule 112 (statement -> assert_statement .)
    INT             reduce using rule 112 (statement -> assert_statement .)
    FLOAT           reduce using rule 112 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 112 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 112 (statement -> assert_statement .)
    LPAREN          reduce using rule 112 (statement -> assert_statement .)
    ADDR            reduce using rule 112 (statement -> assert_statement .)
    TIMES           reduce using rule 112 (statement -> assert_statement .)
    PLUS            reduce using rule 112 (statement -> assert_statement .)
    MINUS           reduce using rule 112 (statement -> assert_statement .)
    NOT             reduce using rule 112 (statement -> assert_statement .)
    ID              reduce using rule 112 (statement -> assert_statement .)
    INT_CONST       reduce using rule 112 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 112 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 112 (statement -> assert_statement .)
    STRING          reduce using rule 112 (statement -> assert_statement .)
    RBRACE          reduce using rule 112 (statement -> assert_statement .)
    ELSE            reduce using rule 112 (statement -> assert_statement .)


state 87

    (113) statement -> print_statement .

    LBRACE          reduce using rule 113 (statement -> print_statement .)
    IF              reduce using rule 113 (statement -> print_statement .)
    WHILE           reduce using rule 113 (statement -> print_statement .)
    FOR             reduce using rule 113 (statement -> print_statement .)
    BREAK           reduce using rule 113 (statement -> print_statement .)
    RETURN          reduce using rule 113 (statement -> print_statement .)
    ASSERT          reduce using rule 113 (statement -> print_statement .)
    PRINT           reduce using rule 113 (statement -> print_statement .)
    READ            reduce using rule 113 (statement -> print_statement .)
    VOID            reduce using rule 113 (statement -> print_statement .)
    CHAR            reduce using rule 113 (statement -> print_statement .)
    INT             reduce using rule 113 (statement -> print_statement .)
    FLOAT           reduce using rule 113 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 113 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 113 (statement -> print_statement .)
    LPAREN          reduce using rule 113 (statement -> print_statement .)
    ADDR            reduce using rule 113 (statement -> print_statement .)
    TIMES           reduce using rule 113 (statement -> print_statement .)
    PLUS            reduce using rule 113 (statement -> print_statement .)
    MINUS           reduce using rule 113 (statement -> print_statement .)
    NOT             reduce using rule 113 (statement -> print_statement .)
    ID              reduce using rule 113 (statement -> print_statement .)
    INT_CONST       reduce using rule 113 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 113 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 113 (statement -> print_statement .)
    STRING          reduce using rule 113 (statement -> print_statement .)
    RBRACE          reduce using rule 113 (statement -> print_statement .)
    ELSE            reduce using rule 113 (statement -> print_statement .)


state 88

    (114) statement -> read_statement .

    LBRACE          reduce using rule 114 (statement -> read_statement .)
    IF              reduce using rule 114 (statement -> read_statement .)
    WHILE           reduce using rule 114 (statement -> read_statement .)
    FOR             reduce using rule 114 (statement -> read_statement .)
    BREAK           reduce using rule 114 (statement -> read_statement .)
    RETURN          reduce using rule 114 (statement -> read_statement .)
    ASSERT          reduce using rule 114 (statement -> read_statement .)
    PRINT           reduce using rule 114 (statement -> read_statement .)
    READ            reduce using rule 114 (statement -> read_statement .)
    VOID            reduce using rule 114 (statement -> read_statement .)
    CHAR            reduce using rule 114 (statement -> read_statement .)
    INT             reduce using rule 114 (statement -> read_statement .)
    FLOAT           reduce using rule 114 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 114 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 114 (statement -> read_statement .)
    LPAREN          reduce using rule 114 (statement -> read_statement .)
    ADDR            reduce using rule 114 (statement -> read_statement .)
    TIMES           reduce using rule 114 (statement -> read_statement .)
    PLUS            reduce using rule 114 (statement -> read_statement .)
    MINUS           reduce using rule 114 (statement -> read_statement .)
    NOT             reduce using rule 114 (statement -> read_statement .)
    ID              reduce using rule 114 (statement -> read_statement .)
    INT_CONST       reduce using rule 114 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 114 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 114 (statement -> read_statement .)
    STRING          reduce using rule 114 (statement -> read_statement .)
    RBRACE          reduce using rule 114 (statement -> read_statement .)
    ELSE            reduce using rule 114 (statement -> read_statement .)


state 89

    (115) expression_statement -> expression . SEMI
    (79) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 137
    COMMA           shift and go to state 138


state 90

    (116) selection_statement -> IF . LPAREN expression RPAREN statement
    (117) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 139


state 91

    (118) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 140


state 92

    (119) iteration_statement -> FOR . LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> FOR . LPAREN declaration expression_emp SEMI expression_emp RPAREN statement

    LPAREN          shift and go to state 141


state 93

    (123) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 142


state 94

    (124) jump_statement -> RETURN . expression_emp SEMI
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 143
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 95

    (125) assert_statement -> ASSERT . expression SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 146
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 96

    (126) print_statement -> PRINT . LPAREN expression_emp RPAREN SEMI

    LPAREN          shift and go to state 147


state 97

    (127) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 148


state 98

    (78) expression -> assignment_expression .

    SEMI            reduce using rule 78 (expression -> assignment_expression .)
    COMMA           reduce using rule 78 (expression -> assignment_expression .)
    RPAREN          reduce using rule 78 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 78 (expression -> assignment_expression .)


state 99

    (82) assignment_expression -> binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    SEMI            reduce using rule 82 (assignment_expression -> binary_expression .)
    COMMA           reduce using rule 82 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 82 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119


state 100

    (83) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (57) cast_expression -> unary_expression .
    (84) assignment_operator -> . EQUALS
    (85) assignment_operator -> . TIMESEQ
    (86) assignment_operator -> . DIVEQ
    (87) assignment_operator -> . MODEQ
    (88) assignment_operator -> . PLUSEQ
    (89) assignment_operator -> . MINUSEQ

    TIMES           reduce using rule 57 (cast_expression -> unary_expression .)
    DIV             reduce using rule 57 (cast_expression -> unary_expression .)
    MOD             reduce using rule 57 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 57 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 57 (cast_expression -> unary_expression .)
    LT              reduce using rule 57 (cast_expression -> unary_expression .)
    LTE             reduce using rule 57 (cast_expression -> unary_expression .)
    GT              reduce using rule 57 (cast_expression -> unary_expression .)
    GTE             reduce using rule 57 (cast_expression -> unary_expression .)
    EQ              reduce using rule 57 (cast_expression -> unary_expression .)
    NEQ             reduce using rule 57 (cast_expression -> unary_expression .)
    AND             reduce using rule 57 (cast_expression -> unary_expression .)
    OR              reduce using rule 57 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 57 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 57 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 57 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 57 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 150
    TIMESEQ         shift and go to state 151
    DIVEQ           shift and go to state 152
    MODEQ           shift and go to state 153
    PLUSEQ          shift and go to state 154
    MINUSEQ         shift and go to state 155

    assignment_operator            shift and go to state 149

state 101

    (7) function_definition -> type_specifier declarator declaration_list_emp compound_statement .

    VOID            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    TIMES           reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    ID              reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator declaration_list_emp compound_statement .)


state 102

    (23) init_declarator -> declarator EQUALS initializer .

    COMMA           reduce using rule 23 (init_declarator -> declarator EQUALS initializer .)
    SEMI            reduce using rule 23 (init_declarator -> declarator EQUALS initializer .)


state 103

    (95) initializer -> assignment_expression .

    COMMA           reduce using rule 95 (initializer -> assignment_expression .)
    SEMI            reduce using rule 95 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 95 (initializer -> assignment_expression .)


state 104

    (96) initializer -> LBRACE . initializer_list RBRACE
    (97) initializer -> LBRACE . initializer_list COMMA RBRACE
    (98) initializer_list -> . initializer
    (99) initializer_list -> . initializer_list COMMA initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 104
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer_list               shift and go to state 156
    initializer                    shift and go to state 157
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 105

    (19) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 19 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 106

    (30) direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .

    LBRACKET        reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    LPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    VOID            reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    CHAR            reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    INT             reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    FLOAT           reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    LBRACE          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    EQUALS          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    COMMA           reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    SEMI            reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)
    RPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LBRACKET constant_expression_emp RBRACKET .)


state 107

    (44) binary_expression -> binary_expression TIMES . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 108

    (45) binary_expression -> binary_expression DIV . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 109

    (46) binary_expression -> binary_expression MOD . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 110

    (47) binary_expression -> binary_expression PLUS . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 111

    (48) binary_expression -> binary_expression MINUS . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 112

    (49) binary_expression -> binary_expression LT . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 113

    (50) binary_expression -> binary_expression LTE . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 114

    (51) binary_expression -> binary_expression GT . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 165
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 115

    (52) binary_expression -> binary_expression GTE . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 166
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 116

    (53) binary_expression -> binary_expression EQ . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 167
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 117

    (54) binary_expression -> binary_expression NEQ . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 168
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 118

    (55) binary_expression -> binary_expression AND . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 169
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 119

    (56) binary_expression -> binary_expression OR . binary_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    binary_expression              shift and go to state 170
    cast_expression                shift and go to state 47
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 120

    (58) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 171


state 121

    (72) primary_expression -> LPAREN expression . RPAREN
    (79) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 138


state 122

    (64) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    postfix_expression             shift and go to state 53
    expression                     shift and go to state 173
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 123

    (65) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (66) postfix_expression -> postfix_expression LPAREN . RPAREN
    (80) argument_expression -> . assignment_expression
    (81) argument_expression -> . argument_expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RPAREN          shift and go to state 175
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    postfix_expression             shift and go to state 53
    argument_expression            shift and go to state 174
    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 124

    (67) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIV             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    LTE             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    GTE             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    NEQ             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESEQ         reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVEQ           reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODEQ           reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSEQ          reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSEQ         reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 67 (postfix_expression -> postfix_expression PLUSPLUS .)


state 125

    (68) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIV             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    LTE             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    GTE             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    NEQ             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESEQ         reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVEQ           reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODEQ           reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSEQ          reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSEQ         reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 68 (postfix_expression -> postfix_expression MINUSMINUS .)


state 126

    (60) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    DIV             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    LTE             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    GTE             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    NEQ             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESEQ         reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    DIVEQ           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MODEQ           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSEQ          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSEQ         reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 60 (unary_expression -> PLUSPLUS unary_expression .)


state 127

    (72) primary_expression -> LPAREN . expression RPAREN
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 121
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 128

    (61) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    DIV             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    LTE             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    GTE             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    NEQ             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESEQ         reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    DIVEQ           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MODEQ           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSEQ          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSEQ         reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 61 (unary_expression -> MINUSMINUS unary_expression .)


state 129

    (62) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    DIV             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    LTE             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    GTE             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    NEQ             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    TIMESEQ         reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    DIVEQ           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MODEQ           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    PLUSEQ          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    MINUSEQ         reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 62 (unary_expression -> unary_operator cast_expression .)


state 130

    (31) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQUALS          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 131

    (34) parameter_list -> parameter_list COMMA . parameter_declaration
    (35) parameter_declaration -> . type_specifier declarator
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT

    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14

    parameter_declaration          shift and go to state 177
    type_specifier                 shift and go to state 72

state 132

    (32) direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .

    LBRACKET        reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    LPAREN          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    VOID            reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    CHAR            reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    INT             reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    FLOAT           reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    LBRACE          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    EQUALS          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    COMMA           reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    SEMI            reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)
    RPAREN          reduce using rule 32 (direct_declarator -> direct_declarator LPAREN identifier_list_emp RPAREN .)


state 133

    (37) identifier_list -> identifier_list COMMA . identifier
    (73) identifier -> . ID

    ID              shift and go to state 18

    identifier                     shift and go to state 178

state 134

    (35) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 35 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 35 (parameter_declaration -> type_specifier declarator .)


state 135

    (106) compound_statement -> LBRACE block_item_list_emp RBRACE .

    VOID            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    CHAR            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    INT             reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    FLOAT           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    LPAREN          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    TIMES           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    ID              reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    $end            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    LBRACE          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    IF              reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    WHILE           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    FOR             reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    BREAK           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    RETURN          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    ASSERT          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    PRINT           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    READ            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    PLUSPLUS        reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    MINUSMINUS      reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    ADDR            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    PLUS            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    MINUS           reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    NOT             reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    INT_CONST       reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    CHAR_CONST      reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    FLOAT_CONST     reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    STRING          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    RBRACE          reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)
    ELSE            reduce using rule 106 (compound_statement -> LBRACE block_item_list_emp RBRACE .)


state 136

    (103) block_item_list -> block_item_list block_item .

    LBRACE          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 103 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 103 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 103 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ADDR            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 103 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 103 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 103 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 103 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 103 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 103 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 103 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 103 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 103 (block_item_list -> block_item_list block_item .)


state 137

    (115) expression_statement -> expression SEMI .

    LBRACE          reduce using rule 115 (expression_statement -> expression SEMI .)
    IF              reduce using rule 115 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 115 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 115 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 115 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 115 (expression_statement -> expression SEMI .)
    ASSERT          reduce using rule 115 (expression_statement -> expression SEMI .)
    PRINT           reduce using rule 115 (expression_statement -> expression SEMI .)
    READ            reduce using rule 115 (expression_statement -> expression SEMI .)
    VOID            reduce using rule 115 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 115 (expression_statement -> expression SEMI .)
    INT             reduce using rule 115 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 115 (expression_statement -> expression SEMI .)
    PLUSPLUS        reduce using rule 115 (expression_statement -> expression SEMI .)
    MINUSMINUS      reduce using rule 115 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 115 (expression_statement -> expression SEMI .)
    ADDR            reduce using rule 115 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 115 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 115 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 115 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 115 (expression_statement -> expression SEMI .)
    ID              reduce using rule 115 (expression_statement -> expression SEMI .)
    INT_CONST       reduce using rule 115 (expression_statement -> expression SEMI .)
    CHAR_CONST      reduce using rule 115 (expression_statement -> expression SEMI .)
    FLOAT_CONST     reduce using rule 115 (expression_statement -> expression SEMI .)
    STRING          reduce using rule 115 (expression_statement -> expression SEMI .)
    RBRACE          reduce using rule 115 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 115 (expression_statement -> expression SEMI .)


state 138

    (79) expression -> expression COMMA . assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    assignment_expression          shift and go to state 179
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 139

    (116) selection_statement -> IF LPAREN . expression RPAREN statement
    (117) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 140

    (118) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 181
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 141

    (119) iteration_statement -> FOR LPAREN . expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> FOR LPAREN . declaration expression_emp SEMI expression_emp RPAREN statement
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (17) declaration -> . decl_body SEMI
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (16) decl_body -> . type_specifier init_declarator_list_emp
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (8) type_specifier -> . VOID
    (9) type_specifier -> . CHAR
    (10) type_specifier -> . INT
    (11) type_specifier -> . FLOAT
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    VOID            shift and go to state 11
    CHAR            shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 182
    declaration                    shift and go to state 183
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    decl_body                      shift and go to state 8
    assignment_expression          shift and go to state 98
    type_specifier                 shift and go to state 24
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 142

    (123) jump_statement -> BREAK SEMI .

    LBRACE          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 123 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 123 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 123 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ADDR            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 123 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 123 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 123 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 123 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 123 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 123 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 123 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 123 (jump_statement -> BREAK SEMI .)


state 143

    (124) jump_statement -> RETURN expression_emp . SEMI

    SEMI            shift and go to state 184


state 144

    (121) expression_emp -> empty .

    SEMI            reduce using rule 121 (expression_emp -> empty .)
    RPAREN          reduce using rule 121 (expression_emp -> empty .)


state 145

    (122) expression_emp -> expression .
    (79) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 122 (expression_emp -> expression .)
    RPAREN          reduce using rule 122 (expression_emp -> expression .)
    COMMA           shift and go to state 138


state 146

    (125) assert_statement -> ASSERT expression . SEMI
    (79) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 185
    COMMA           shift and go to state 138


state 147

    (126) print_statement -> PRINT LPAREN . expression_emp RPAREN SEMI
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 186
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 148

    (127) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (80) argument_expression -> . assignment_expression
    (81) argument_expression -> . argument_expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    argument_expression            shift and go to state 187
    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 149

    (83) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    unary_expression               shift and go to state 100
    assignment_expression          shift and go to state 188
    binary_expression              shift and go to state 99
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 150

    (84) assignment_operator -> EQUALS .

    PLUSPLUS        reduce using rule 84 (assignment_operator -> EQUALS .)
    MINUSMINUS      reduce using rule 84 (assignment_operator -> EQUALS .)
    LPAREN          reduce using rule 84 (assignment_operator -> EQUALS .)
    ADDR            reduce using rule 84 (assignment_operator -> EQUALS .)
    TIMES           reduce using rule 84 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 84 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 84 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 84 (assignment_operator -> EQUALS .)
    ID              reduce using rule 84 (assignment_operator -> EQUALS .)
    INT_CONST       reduce using rule 84 (assignment_operator -> EQUALS .)
    CHAR_CONST      reduce using rule 84 (assignment_operator -> EQUALS .)
    FLOAT_CONST     reduce using rule 84 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 84 (assignment_operator -> EQUALS .)


state 151

    (85) assignment_operator -> TIMESEQ .

    PLUSPLUS        reduce using rule 85 (assignment_operator -> TIMESEQ .)
    MINUSMINUS      reduce using rule 85 (assignment_operator -> TIMESEQ .)
    LPAREN          reduce using rule 85 (assignment_operator -> TIMESEQ .)
    ADDR            reduce using rule 85 (assignment_operator -> TIMESEQ .)
    TIMES           reduce using rule 85 (assignment_operator -> TIMESEQ .)
    PLUS            reduce using rule 85 (assignment_operator -> TIMESEQ .)
    MINUS           reduce using rule 85 (assignment_operator -> TIMESEQ .)
    NOT             reduce using rule 85 (assignment_operator -> TIMESEQ .)
    ID              reduce using rule 85 (assignment_operator -> TIMESEQ .)
    INT_CONST       reduce using rule 85 (assignment_operator -> TIMESEQ .)
    CHAR_CONST      reduce using rule 85 (assignment_operator -> TIMESEQ .)
    FLOAT_CONST     reduce using rule 85 (assignment_operator -> TIMESEQ .)
    STRING          reduce using rule 85 (assignment_operator -> TIMESEQ .)


state 152

    (86) assignment_operator -> DIVEQ .

    PLUSPLUS        reduce using rule 86 (assignment_operator -> DIVEQ .)
    MINUSMINUS      reduce using rule 86 (assignment_operator -> DIVEQ .)
    LPAREN          reduce using rule 86 (assignment_operator -> DIVEQ .)
    ADDR            reduce using rule 86 (assignment_operator -> DIVEQ .)
    TIMES           reduce using rule 86 (assignment_operator -> DIVEQ .)
    PLUS            reduce using rule 86 (assignment_operator -> DIVEQ .)
    MINUS           reduce using rule 86 (assignment_operator -> DIVEQ .)
    NOT             reduce using rule 86 (assignment_operator -> DIVEQ .)
    ID              reduce using rule 86 (assignment_operator -> DIVEQ .)
    INT_CONST       reduce using rule 86 (assignment_operator -> DIVEQ .)
    CHAR_CONST      reduce using rule 86 (assignment_operator -> DIVEQ .)
    FLOAT_CONST     reduce using rule 86 (assignment_operator -> DIVEQ .)
    STRING          reduce using rule 86 (assignment_operator -> DIVEQ .)


state 153

    (87) assignment_operator -> MODEQ .

    PLUSPLUS        reduce using rule 87 (assignment_operator -> MODEQ .)
    MINUSMINUS      reduce using rule 87 (assignment_operator -> MODEQ .)
    LPAREN          reduce using rule 87 (assignment_operator -> MODEQ .)
    ADDR            reduce using rule 87 (assignment_operator -> MODEQ .)
    TIMES           reduce using rule 87 (assignment_operator -> MODEQ .)
    PLUS            reduce using rule 87 (assignment_operator -> MODEQ .)
    MINUS           reduce using rule 87 (assignment_operator -> MODEQ .)
    NOT             reduce using rule 87 (assignment_operator -> MODEQ .)
    ID              reduce using rule 87 (assignment_operator -> MODEQ .)
    INT_CONST       reduce using rule 87 (assignment_operator -> MODEQ .)
    CHAR_CONST      reduce using rule 87 (assignment_operator -> MODEQ .)
    FLOAT_CONST     reduce using rule 87 (assignment_operator -> MODEQ .)
    STRING          reduce using rule 87 (assignment_operator -> MODEQ .)


state 154

    (88) assignment_operator -> PLUSEQ .

    PLUSPLUS        reduce using rule 88 (assignment_operator -> PLUSEQ .)
    MINUSMINUS      reduce using rule 88 (assignment_operator -> PLUSEQ .)
    LPAREN          reduce using rule 88 (assignment_operator -> PLUSEQ .)
    ADDR            reduce using rule 88 (assignment_operator -> PLUSEQ .)
    TIMES           reduce using rule 88 (assignment_operator -> PLUSEQ .)
    PLUS            reduce using rule 88 (assignment_operator -> PLUSEQ .)
    MINUS           reduce using rule 88 (assignment_operator -> PLUSEQ .)
    NOT             reduce using rule 88 (assignment_operator -> PLUSEQ .)
    ID              reduce using rule 88 (assignment_operator -> PLUSEQ .)
    INT_CONST       reduce using rule 88 (assignment_operator -> PLUSEQ .)
    CHAR_CONST      reduce using rule 88 (assignment_operator -> PLUSEQ .)
    FLOAT_CONST     reduce using rule 88 (assignment_operator -> PLUSEQ .)
    STRING          reduce using rule 88 (assignment_operator -> PLUSEQ .)


state 155

    (89) assignment_operator -> MINUSEQ .

    PLUSPLUS        reduce using rule 89 (assignment_operator -> MINUSEQ .)
    MINUSMINUS      reduce using rule 89 (assignment_operator -> MINUSEQ .)
    LPAREN          reduce using rule 89 (assignment_operator -> MINUSEQ .)
    ADDR            reduce using rule 89 (assignment_operator -> MINUSEQ .)
    TIMES           reduce using rule 89 (assignment_operator -> MINUSEQ .)
    PLUS            reduce using rule 89 (assignment_operator -> MINUSEQ .)
    MINUS           reduce using rule 89 (assignment_operator -> MINUSEQ .)
    NOT             reduce using rule 89 (assignment_operator -> MINUSEQ .)
    ID              reduce using rule 89 (assignment_operator -> MINUSEQ .)
    INT_CONST       reduce using rule 89 (assignment_operator -> MINUSEQ .)
    CHAR_CONST      reduce using rule 89 (assignment_operator -> MINUSEQ .)
    FLOAT_CONST     reduce using rule 89 (assignment_operator -> MINUSEQ .)
    STRING          reduce using rule 89 (assignment_operator -> MINUSEQ .)


state 156

    (96) initializer -> LBRACE initializer_list . RBRACE
    (97) initializer -> LBRACE initializer_list . COMMA RBRACE
    (99) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 189
    COMMA           shift and go to state 190


state 157

    (98) initializer_list -> initializer .

    RBRACE          reduce using rule 98 (initializer_list -> initializer .)
    COMMA           reduce using rule 98 (initializer_list -> initializer .)


state 158

    (44) binary_expression -> binary_expression TIMES binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    DIV             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    LTE             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    GTE             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    EQ              reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    NEQ             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 44 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 108 ]
  ! MOD             [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 159

    (45) binary_expression -> binary_expression DIV binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    DIV             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    MOD             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    PLUS            reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    MINUS           reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    LT              reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    LTE             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    GT              reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    GTE             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    EQ              reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    NEQ             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    AND             reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    OR              reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    RBRACKET        reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    SEMI            reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    COMMA           reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    RPAREN          reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)
    RBRACE          reduce using rule 45 (binary_expression -> binary_expression DIV binary_expression .)

  ! TIMES           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 108 ]
  ! MOD             [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 160

    (46) binary_expression -> binary_expression MOD binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    DIV             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    LTE             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    GTE             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    EQ              reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    NEQ             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 46 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 107 ]
  ! DIV             [ shift and go to state 108 ]
  ! MOD             [ shift and go to state 109 ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 161

    (47) binary_expression -> binary_expression PLUS binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    LTE             reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    GTE             reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    EQ              reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    NEQ             reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109

  ! TIMES           [ reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIV             [ reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 47 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 162

    (48) binary_expression -> binary_expression MINUS binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    LTE             reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    GTE             reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    EQ              reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    NEQ             reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109

  ! TIMES           [ reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIV             [ reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 48 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 110 ]
  ! MINUS           [ shift and go to state 111 ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 163

    (49) binary_expression -> binary_expression LT binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    LTE             reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    GTE             reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    EQ              reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    NEQ             reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111

  ! TIMES           [ reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIV             [ reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 49 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 164

    (50) binary_expression -> binary_expression LTE binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    LTE             reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    GT              reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    GTE             reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    EQ              reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    NEQ             reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    AND             reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    OR              reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACKET        reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    SEMI            reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    COMMA           reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    RPAREN          reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACE          reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111

  ! TIMES           [ reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! DIV             [ reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MOD             [ reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! PLUS            [ reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MINUS           [ reduce using rule 50 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 165

    (51) binary_expression -> binary_expression GT binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    LTE             reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    GTE             reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    EQ              reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    NEQ             reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111

  ! TIMES           [ reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIV             [ reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 51 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 166

    (52) binary_expression -> binary_expression GTE binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    LTE             reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    GT              reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    GTE             reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    EQ              reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    NEQ             reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    AND             reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    OR              reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACKET        reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    SEMI            reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    COMMA           reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    RPAREN          reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACE          reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111

  ! TIMES           [ reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! DIV             [ reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MOD             [ reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! PLUS            [ reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MINUS           [ reduce using rule 52 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LT              [ shift and go to state 112 ]
  ! LTE             [ shift and go to state 113 ]
  ! GT              [ shift and go to state 114 ]
  ! GTE             [ shift and go to state 115 ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 167

    (53) binary_expression -> binary_expression EQ binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    NEQ             reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    AND             reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    OR              reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACKET        reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    SEMI            reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    COMMA           reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    RPAREN          reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    RBRACE          reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115

  ! TIMES           [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! DIV             [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MOD             [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! PLUS            [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! MINUS           [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LT              [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! LTE             [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GT              [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! GTE             [ reduce using rule 53 (binary_expression -> binary_expression EQ binary_expression .) ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 168

    (54) binary_expression -> binary_expression NEQ binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    EQ              reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    NEQ             reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    AND             reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    OR              reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    RBRACKET        reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    SEMI            reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    COMMA           reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    RPAREN          reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    RBRACE          reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115

  ! TIMES           [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! DIV             [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! MOD             [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! PLUS            [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! MINUS           [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! LT              [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! LTE             [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! GT              [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! GTE             [ reduce using rule 54 (binary_expression -> binary_expression NEQ binary_expression .) ]
  ! EQ              [ shift and go to state 116 ]
  ! NEQ             [ shift and go to state 117 ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 169

    (55) binary_expression -> binary_expression AND binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117

  ! TIMES           [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIV             [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LTE             [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GTE             [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQ              [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NEQ             [ reduce using rule 55 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 118 ]
  ! OR              [ shift and go to state 119 ]


state 170

    (56) binary_expression -> binary_expression OR binary_expression .
    (44) binary_expression -> binary_expression . TIMES binary_expression
    (45) binary_expression -> binary_expression . DIV binary_expression
    (46) binary_expression -> binary_expression . MOD binary_expression
    (47) binary_expression -> binary_expression . PLUS binary_expression
    (48) binary_expression -> binary_expression . MINUS binary_expression
    (49) binary_expression -> binary_expression . LT binary_expression
    (50) binary_expression -> binary_expression . LTE binary_expression
    (51) binary_expression -> binary_expression . GT binary_expression
    (52) binary_expression -> binary_expression . GTE binary_expression
    (53) binary_expression -> binary_expression . EQ binary_expression
    (54) binary_expression -> binary_expression . NEQ binary_expression
    (55) binary_expression -> binary_expression . AND binary_expression
    (56) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 107
    DIV             shift and go to state 108
    MOD             shift and go to state 109
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    LT              shift and go to state 112
    LTE             shift and go to state 113
    GT              shift and go to state 114
    GTE             shift and go to state 115
    EQ              shift and go to state 116
    NEQ             shift and go to state 117
    AND             shift and go to state 118

  ! TIMES           [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIV             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LTE             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GTE             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQ              [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NEQ             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 56 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 119 ]


state 171

    (58) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LPAREN          shift and go to state 52
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    cast_expression                shift and go to state 191
    unary_expression               shift and go to state 51
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 172

    (72) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    TIMESEQ         reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    DIVEQ           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MODEQ           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    PLUSEQ          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    MINUSEQ         reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 72 (primary_expression -> LPAREN expression RPAREN .)


state 173

    (64) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (79) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 192
    COMMA           shift and go to state 138


state 174

    (65) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (81) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 194


state 175

    (66) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIV             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTE             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTE             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQ              reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NEQ             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESEQ         reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVEQ           reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODEQ           reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSEQ          reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSEQ         reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 66 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 176

    (80) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 80 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 80 (argument_expression -> assignment_expression .)


state 177

    (34) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 34 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 34 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 178

    (37) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 37 (identifier_list -> identifier_list COMMA identifier .)
    RPAREN          reduce using rule 37 (identifier_list -> identifier_list COMMA identifier .)


state 179

    (79) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 79 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 79 (expression -> expression COMMA assignment_expression .)


state 180

    (116) selection_statement -> IF LPAREN expression . RPAREN statement
    (117) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (79) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 195
    COMMA           shift and go to state 138


state 181

    (118) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (79) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 196
    COMMA           shift and go to state 138


state 182

    (119) iteration_statement -> FOR LPAREN expression_emp . SEMI expression_emp SEMI expression_emp RPAREN statement

    SEMI            shift and go to state 197


state 183

    (120) iteration_statement -> FOR LPAREN declaration . expression_emp SEMI expression_emp RPAREN statement
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 198
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 184

    (124) jump_statement -> RETURN expression_emp SEMI .

    LBRACE          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    IF              reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    WHILE           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    FOR             reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    BREAK           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    RETURN          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    ASSERT          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    PRINT           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    READ            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    VOID            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    CHAR            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    INT             reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    FLOAT           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    PLUSPLUS        reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    MINUSMINUS      reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    LPAREN          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    ADDR            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    TIMES           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    PLUS            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    MINUS           reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    NOT             reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    ID              reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    INT_CONST       reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    CHAR_CONST      reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    FLOAT_CONST     reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    STRING          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    RBRACE          reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)
    ELSE            reduce using rule 124 (jump_statement -> RETURN expression_emp SEMI .)


state 185

    (125) assert_statement -> ASSERT expression SEMI .

    LBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ADDR            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 125 (assert_statement -> ASSERT expression SEMI .)


state 186

    (126) print_statement -> PRINT LPAREN expression_emp . RPAREN SEMI

    RPAREN          shift and go to state 199


state 187

    (127) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (81) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 194


state 188

    (83) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI            reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 189

    (96) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 96 (initializer -> LBRACE initializer_list RBRACE .)


state 190

    (97) initializer -> LBRACE initializer_list COMMA . RBRACE
    (99) initializer_list -> initializer_list COMMA . initializer
    (95) initializer -> . assignment_expression
    (96) initializer -> . LBRACE initializer_list RBRACE
    (97) initializer -> . LBRACE initializer_list COMMA RBRACE
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RBRACE          shift and go to state 201
    LBRACE          shift and go to state 104
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    initializer                    shift and go to state 202
    assignment_expression          shift and go to state 103
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 191

    (58) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIV             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LTE             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GTE             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NEQ             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESEQ         reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVEQ           reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODEQ           reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSEQ          reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSEQ         reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 58 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 192

    (64) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIV             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LTE             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GTE             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NEQ             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESEQ         reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVEQ           reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODEQ           reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSEQ          reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSEQ         reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 64 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 193

    (65) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACKET        reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSPLUS        reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSMINUS      reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIV             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LTE             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GTE             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQ              reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NEQ             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMESEQ         reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVEQ           reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODEQ           reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSEQ          reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSEQ         reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 65 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 194

    (81) argument_expression -> argument_expression COMMA . assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    assignment_expression          shift and go to state 203
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 195

    (116) selection_statement -> IF LPAREN expression RPAREN . statement
    (117) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 89
    statement                      shift and go to state 204
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 196

    (118) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 89
    statement                      shift and go to state 205
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 197

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI . expression_emp SEMI expression_emp RPAREN statement
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    SEMI            reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 206
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 198

    (120) iteration_statement -> FOR LPAREN declaration expression_emp . SEMI expression_emp RPAREN statement

    SEMI            shift and go to state 207


state 199

    (126) print_statement -> PRINT LPAREN expression_emp RPAREN . SEMI

    SEMI            shift and go to state 208


state 200

    (127) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 209


state 201

    (97) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 97 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 202

    (99) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 99 (initializer_list -> initializer_list COMMA initializer .)


state 203

    (81) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 81 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 81 (argument_expression -> argument_expression COMMA assignment_expression .)


state 204

    (116) selection_statement -> IF LPAREN expression RPAREN statement .
    (117) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    LBRACE          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDR            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 210

  ! ELSE            [ reduce using rule 116 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 205

    (118) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    LBRACE          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDR            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 118 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 206

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp . SEMI expression_emp RPAREN statement

    SEMI            shift and go to state 211


state 207

    (120) iteration_statement -> FOR LPAREN declaration expression_emp SEMI . expression_emp RPAREN statement
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 212
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 208

    (126) print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .

    LBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    IF              reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    WHILE           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    FOR             reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    BREAK           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    RETURN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    ASSERT          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    PRINT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    READ            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    VOID            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    CHAR            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    INT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    FLOAT           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    PLUSPLUS        reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    MINUSMINUS      reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    LPAREN          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    ADDR            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    TIMES           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    PLUS            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    MINUS           reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    NOT             reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    ID              reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    INT_CONST       reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    CHAR_CONST      reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    STRING          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    RBRACE          reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)
    ELSE            reduce using rule 126 (print_statement -> PRINT LPAREN expression_emp RPAREN SEMI .)


state 209

    (127) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    LBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDR            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RBRACE          reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 127 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 210

    (117) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression                     shift and go to state 89
    statement                      shift and go to state 213
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 211

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI . expression_emp RPAREN statement
    (121) expression_emp -> . empty
    (122) expression_emp -> . expression
    (128) empty -> .
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    RPAREN          reduce using rule 128 (empty -> .)
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    expression_emp                 shift and go to state 214
    empty                          shift and go to state 144
    expression                     shift and go to state 145
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 212

    (120) iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp . RPAREN statement

    RPAREN          shift and go to state 215


state 213

    (117) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    LBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDR            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 117 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 214

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp . RPAREN statement

    RPAREN          shift and go to state 216


state 215

    (120) iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    statement                      shift and go to state 217
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression                     shift and go to state 89
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 216

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN . statement
    (107) statement -> . expression_statement
    (108) statement -> . compound_statement
    (109) statement -> . selection_statement
    (110) statement -> . iteration_statement
    (111) statement -> . jump_statement
    (112) statement -> . assert_statement
    (113) statement -> . print_statement
    (114) statement -> . read_statement
    (115) expression_statement -> . expression SEMI
    (106) compound_statement -> . LBRACE block_item_list_emp RBRACE
    (116) selection_statement -> . IF LPAREN expression RPAREN statement
    (117) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (118) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (119) iteration_statement -> . FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement
    (120) iteration_statement -> . FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement
    (123) jump_statement -> . BREAK SEMI
    (124) jump_statement -> . RETURN expression_emp SEMI
    (125) assert_statement -> . ASSERT expression SEMI
    (126) print_statement -> . PRINT LPAREN expression_emp RPAREN SEMI
    (127) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (78) expression -> . assignment_expression
    (79) expression -> . expression COMMA assignment_expression
    (82) assignment_expression -> . binary_expression
    (83) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (43) binary_expression -> . cast_expression
    (44) binary_expression -> . binary_expression TIMES binary_expression
    (45) binary_expression -> . binary_expression DIV binary_expression
    (46) binary_expression -> . binary_expression MOD binary_expression
    (47) binary_expression -> . binary_expression PLUS binary_expression
    (48) binary_expression -> . binary_expression MINUS binary_expression
    (49) binary_expression -> . binary_expression LT binary_expression
    (50) binary_expression -> . binary_expression LTE binary_expression
    (51) binary_expression -> . binary_expression GT binary_expression
    (52) binary_expression -> . binary_expression GTE binary_expression
    (53) binary_expression -> . binary_expression EQ binary_expression
    (54) binary_expression -> . binary_expression NEQ binary_expression
    (55) binary_expression -> . binary_expression AND binary_expression
    (56) binary_expression -> . binary_expression OR binary_expression
    (59) unary_expression -> . postfix_expression
    (60) unary_expression -> . PLUSPLUS unary_expression
    (61) unary_expression -> . MINUSMINUS unary_expression
    (62) unary_expression -> . unary_operator cast_expression
    (57) cast_expression -> . unary_expression
    (58) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (63) postfix_expression -> . primary_expression
    (64) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (65) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (66) postfix_expression -> . postfix_expression LPAREN RPAREN
    (67) postfix_expression -> . postfix_expression PLUSPLUS
    (68) postfix_expression -> . postfix_expression MINUSMINUS
    (90) unary_operator -> . ADDR
    (91) unary_operator -> . TIMES
    (92) unary_operator -> . PLUS
    (93) unary_operator -> . MINUS
    (94) unary_operator -> . NOT
    (69) primary_expression -> . identifier
    (70) primary_expression -> . constant
    (71) primary_expression -> . string
    (72) primary_expression -> . LPAREN expression RPAREN
    (73) identifier -> . ID
    (74) constant -> . INT_CONST
    (75) constant -> . CHAR_CONST
    (76) constant -> . FLOAT_CONST
    (77) string -> . STRING

    LBRACE          shift and go to state 37
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    ASSERT          shift and go to state 95
    PRINT           shift and go to state 96
    READ            shift and go to state 97
    PLUSPLUS        shift and go to state 54
    MINUSMINUS      shift and go to state 55
    LPAREN          shift and go to state 52
    ADDR            shift and go to state 58
    TIMES           shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    NOT             shift and go to state 59
    ID              shift and go to state 18
    INT_CONST       shift and go to state 63
    CHAR_CONST      shift and go to state 64
    FLOAT_CONST     shift and go to state 65
    STRING          shift and go to state 66

    statement                      shift and go to state 218
    expression_statement           shift and go to state 81
    compound_statement             shift and go to state 82
    selection_statement            shift and go to state 83
    iteration_statement            shift and go to state 84
    jump_statement                 shift and go to state 85
    assert_statement               shift and go to state 86
    print_statement                shift and go to state 87
    read_statement                 shift and go to state 88
    expression                     shift and go to state 89
    assignment_expression          shift and go to state 98
    binary_expression              shift and go to state 99
    unary_expression               shift and go to state 100
    cast_expression                shift and go to state 47
    postfix_expression             shift and go to state 53
    unary_operator                 shift and go to state 56
    primary_expression             shift and go to state 57
    identifier                     shift and go to state 60
    constant                       shift and go to state 61
    string                         shift and go to state 62

state 217

    (120) iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .

    LBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    IF              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    WHILE           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    FOR             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    BREAK           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    RETURN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    ASSERT          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    PRINT           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    READ            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    VOID            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    CHAR            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    INT             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    FLOAT           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    PLUSPLUS        reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    MINUSMINUS      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    LPAREN          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    ADDR            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    TIMES           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    PLUS            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    MINUS           reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    NOT             reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    ID              reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    INT_CONST       reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    CHAR_CONST      reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    FLOAT_CONST     reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    STRING          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    RBRACE          reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)
    ELSE            reduce using rule 120 (iteration_statement -> FOR LPAREN declaration expression_emp SEMI expression_emp RPAREN statement .)


state 218

    (119) iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .

    LBRACE          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    IF              reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    WHILE           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    FOR             reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    BREAK           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    RETURN          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    ASSERT          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    PRINT           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    READ            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    VOID            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    CHAR            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    INT             reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    FLOAT           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    PLUSPLUS        reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    MINUSMINUS      reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    LPAREN          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    ADDR            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    TIMES           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    PLUS            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    MINUS           reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    NOT             reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    ID              reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    INT_CONST       reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    CHAR_CONST      reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    FLOAT_CONST     reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    STRING          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    RBRACE          reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)
    ELSE            reduce using rule 119 (iteration_statement -> FOR LPAREN expression_emp SEMI expression_emp SEMI expression_emp RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 204 resolved as shift
